{
  "address": "0x72BE0E3265A3497F3aD7d7830E7d1D37476d8Cb5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentURI",
          "type": "string"
        }
      ],
      "name": "ContentUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payoutAddress",
          "type": "address"
        }
      ],
      "name": "RoyaltyUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "merkleRootUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contentURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "royaltyPayout",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "royaltyBPS",
              "type": "uint16"
            }
          ],
          "internalType": "struct TR909.Data",
          "name": "_inputData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "royaltyPayoutAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenContentURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_contentURI",
          "type": "string"
        }
      ],
      "name": "updateContentURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        }
      ],
      "name": "updateMetadataURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_newRoot",
          "type": "bytes32"
        }
      ],
      "name": "updateRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_royaltyPayoutAddress",
          "type": "address"
        }
      ],
      "name": "updateRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x390f996a9913c1c2449bc59e5598cb6a17927b82a4e2b355c51efdf7725c77ba",
  "receipt": {
    "to": null,
    "from": "0x723aAe1AD495f0b804624bc507741c08F214fba2",
    "contractAddress": "0x72BE0E3265A3497F3aD7d7830E7d1D37476d8Cb5",
    "transactionIndex": 12,
    "gasUsed": "2059971",
    "logsBloom": "0x
    "blockHash": "0x378ba5ee1a9a8f8cc8cce5d7000fbe8cade4f4b3b58cd0e1d7f550ae12bf50f1",
    "transactionHash": "0x390f996a9913c1c2449bc59e5598cb6a17927b82a4e2b355c51efdf7725c77ba",
    "logs": [],
    "blockNumber": 9986101,
    "cumulativeGasUsed": "4950806",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3175484a78bd6885a311b0717dba3158",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"}],\"name\":\"ContentUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"RoyaltyUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"merkleRootUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyPayout\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royaltyBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct TR909.Data\",\"name\":\"_inputData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"royaltyPayoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenContentURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_contentURI\",\"type\":\"string\"}],\"name\":\"updateContentURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"updateMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newRoot\",\"type\":\"bytes32\"}],\"name\":\"updateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_royaltyPayoutAddress\",\"type\":\"address\"}],\"name\":\"updateRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@bretth18 (COMPUTER DATA) of @catalogworks\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Requires contract admin or creator of token to burn. Emits transfer Event\",\"params\":{\"_tokenId\":\": The tokenId to burn\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"creator(uint256)\":{\"params\":{\"_tokenId\":\": The tokenId to get creator of\"},\"returns\":{\"_0\":\"address The creator of the tokenId\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint((string,string,address,address,uint16),bytes32[])\":{\"details\":\"Mint requires a valid Merkle proof. We use the creator address as the source of truth here.\",\"params\":{\"_inputData\":\": tuple data of type Data, containing contents of CNFT.\",\"_proof\":\": bytes32[] Valid merkle proof for the input creator address.\"},\"returns\":{\"_0\":\"uint256 The tokenId of the minted token.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"_salePrice\":\": The new sale price\",\"_tokenId\":\": The tokenId to update\"},\"returns\":{\"receiver\":\"royalty payout address and calculated royalty payment\"}},\"royaltyPayoutAddress(uint256)\":{\"params\":{\"_tokenId\":\": The tokenId to get the royalty payout address for\"},\"returns\":{\"_0\":\"address The royalty payout address\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\": The interfaceId to check\"},\"returns\":{\"_0\":\"interface type supported\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenContentURI(uint256)\":{\"params\":{\"_tokenId\":\": The tokenId to obtain the content URI from\"},\"returns\":{\"_0\":\"string The content URI of the token\"}},\"tokenURI(uint256)\":{\"details\":\"Returns the metadataURI of the token, there is no method for metadataURI()\",\"params\":{\"_tokenId\":\": The tokenId to get the URI for\"},\"returns\":{\"_0\":\"string The metadataURI of the token\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateContentURI(uint256,string)\":{\"details\":\"Requires contract admin to update.\",\"params\":{\"_contentURI\":\": The new contentURI\",\"_tokenId\":\": The tokenId to update\"}},\"updateMetadataURI(uint256,string)\":{\"details\":\"Requires contract admin to update or creator to update. note: potentially exploitable by compromised wallet\",\"params\":{\"_metadataURI\":\": The new metadataURI\",\"_tokenId\":\": The tokenId to update\"}},\"updateRoot(bytes32)\":{\"details\":\"Requires contract admin to update, emits a merkleRootUpdated event.\",\"params\":{\"_newRoot\":\": The new Merkle Root\"}},\"updateRoyaltyInfo(uint256,address)\":{\"details\":\"Requires contract admin to update.\",\"params\":{\"_royaltyPayoutAddress\":\": The new royalty payout address\",\"_tokenId\":\": The tokenId to update\"}}},\"title\":\"TR909\",\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256,string)\":{\"notice\":\"Event\"},\"merkleRootUpdated(bytes32)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burn Function\"},\"constructor\":{\"notice\":\"Constructor\"},\"creator(uint256)\":{\"notice\":\"Get Creator Function\"},\"initialize(string,string)\":{\"notice\":\"Initialize Function\"},\"merkleRoot()\":{\"notice\":\"State variable containing merkle root see {IAngelaList}\"},\"mint((string,string,address,address,uint16),bytes32[])\":{\"notice\":\"Mint Function\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"royaltyInfo Function conforms to EIP2981\"},\"royaltyPayoutAddress(uint256)\":{\"notice\":\"Get Royalty Payout Address Function\"},\"supportsInterface(bytes4)\":{\"notice\":\"interface Override Function\"},\"tokenContentURI(uint256)\":{\"notice\":\"Get tokenContentURI Function\"},\"tokenURI(uint256)\":{\"notice\":\"Get TokenURI Function\"},\"updateContentURI(uint256,string)\":{\"notice\":\"Update ContentURI Function\"},\"updateMetadataURI(uint256,string)\":{\"notice\":\"Update MetadataURI Function\"},\"updateRoot(bytes32)\":{\"notice\":\"Update Root Function\"},\"updateRoyaltyInfo(uint256,address)\":{\"notice\":\"Update Royalty Info Function\"}},\"notice\":\"-------------------------------------------------------------------------------------------------------------------- ______  ____       __      __      __ /\\\\__  _\\\\/\\\\  _`\\\\   /'_ `\\\\  /'__`\\\\  /'_ `\\\\ \\\\/_/\\\\ \\\\/\\\\ \\\\ \\\\L\\\\ \\\\/\\\\ \\\\L\\\\ \\\\/\\\\ \\\\/\\\\ \\\\/\\\\ \\\\L\\\\ \\\\ \\\\ \\\\ \\\\ \\\\ \\\\ ,  /\\\\ \\\\___, \\\\ \\\\ \\\\ \\\\ \\\\ \\\\___, \\\\ \\\\ \\\\ \\\\ \\\\ \\\\ \\\\\\\\ \\\\\\\\/__,/\\\\ \\\\ \\\\ \\\\_\\\\ \\\\/__,/\\\\ \\\\ \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\   \\\\ \\\\_\\\\ \\\\____/    \\\\ \\\\_\\\\ \\\\/_/  \\\\/_/\\\\/ /    \\\\/_/\\\\/___/      \\\\/_/************************************************ LEGAL DISCLAIMER: https://catalog.works/terms************************************************ ---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                            RINKEBY CNFT (V2: CODENAME \\\"TR909\\\")Catalog Shared Creator Contract (CNFT), v2(TR909). This is an upgradeable ERC721 contract, with a access control restrictions for a given Admin address. Purpose built for optimization over the original Zora V1 isian (Iaian Nash) of Zora for help with this implementation. ---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/catalog/TR909.sol\":\"TR909\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x121966b3220d263a6669dcf59c1254bd48ed237adf4d8a595add70a7927eada1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x34a68a6915f19a764a8ce8e6fdc6bf259744a6142afe478072ada07d65cf65d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x6c25d4211724a6f4cdc8d25397edc780f48d951fc81c1d507f59b3edb22afaf7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0xaa4ae4f717c8fd3595482206f8af5e48bbec295f7c5d4e5d3a36b75b80014701\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/AngelaList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport {MerkleProofUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\n\\n/**\\n--------------------------------------------------------------------------------------------------------------------\\n                                                                                        \\n     o                                         o888             ooooo       o88                o8   \\n    888     oo oooooo     oooooooo8 ooooooooo8  888   ooooooo    888        oooo   oooooooo8 o888oo \\n   8  88     888   888  888    88o 888oooooo8   888   ooooo888   888         888  888ooooooo  888   \\n  8oooo88    888   888   888oo888o 888          888 888    888   888      o  888          888 888   \\no88o  o888o o888o o888o 888     888  88oooo888 o888o 88ooo88 8o o888ooooo88 o888o 88oooooo88   888o \\n                         888ooo888       \\n\\n\\\"heute nicht\\\" - Angela Merkel                                                                                                                                                                                                                                                                                                                                                                                                                                       \\n---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \\nTESTNET WIP\\n\\\"AngelaList\\\"                :   Allowlist utility merkle proof contract\\n@author                     :   @bretth18 (computerdata) \\n@title                      :   AngelaList\\n@dev                        :   n/a\\n */\\n\\ncontract AngelaList {\\n    /// State variable containing merkle root\\n    /// see {IAngelaList}\\n    bytes32 public merkleRoot;\\n\\n    /// Events\\n    event merkleRootUpdated(bytes32 _merkleRoot);\\n\\n    /// update merkle root\\n    function updateMerkleRoot(bytes32 _newRoot) internal {\\n        merkleRoot = _newRoot;\\n        emit merkleRootUpdated(merkleRoot);\\n    }\\n\\n    /// return leaf\\n    function leaf(address _account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account));\\n    }\\n\\n    /// verify proof\\n    function verify(bytes32 _leaf, bytes32[] memory _proof) internal view returns (bool) {\\n        return MerkleProofUpgradeable.verify(_proof, merkleRoot, _leaf);\\n    }\\n}\\n\",\"keccak256\":\"0xcc8c87f434d72f4ba25da0194f58555cd2f9d7e0de3f21f92781d2c98fdef4b0\",\"license\":\"MIT\"},\"contracts/catalog/TR909.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {AngelaList} from \\\"../AngelaList.sol\\\";\\n\\n/**\\n--------------------------------------------------------------------------------------------------------------------\\n\\n ______  ____       __      __      __\\n/\\\\__  _\\\\/\\\\  _`\\\\   /'_ `\\\\  /'__`\\\\  /'_ `\\\\\\n\\\\/_/\\\\ \\\\/\\\\ \\\\ \\\\L\\\\ \\\\/\\\\ \\\\L\\\\ \\\\/\\\\ \\\\/\\\\ \\\\/\\\\ \\\\L\\\\ \\\\\\n   \\\\ \\\\ \\\\ \\\\ \\\\ ,  /\\\\ \\\\___, \\\\ \\\\ \\\\ \\\\ \\\\ \\\\___, \\\\\\n    \\\\ \\\\ \\\\ \\\\ \\\\ \\\\\\\\ \\\\\\\\/__,/\\\\ \\\\ \\\\ \\\\_\\\\ \\\\/__,/\\\\ \\\\\\n     \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\   \\\\ \\\\_\\\\ \\\\____/    \\\\ \\\\_\\\\\\n      \\\\/_/  \\\\/_/\\\\/ /    \\\\/_/\\\\/___/      \\\\/_/\\n\\n\\n************************************************\\nLEGAL DISCLAIMER:\\nhttps://catalog.works/terms\\n************************************************\\n\\n---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \\nRINKEBY CNFT (V2: CODENAME \\\"TR909\\\")\\n@title TR909\\n@author @bretth18 (COMPUTER DATA) of @catalogworks\\n@notice Catalog Shared Creator Contract (CNFT), v2(TR909). This is an upgradeable ERC721 contract, with a access\\n        control restrictions for a given Admin address. Purpose built for optimization over the original Zora V1\\n        contracts. Special thanks to @ isian (Iaian Nash) of Zora for help with this implementation.\\n---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \\n */\\n\\ncontract TR909 is ERC721Upgradeable, IERC2981Upgradeable, OwnableUpgradeable, AngelaList {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    /// Event\\n    event MetadataUpdate(uint256 indexed tokenId, string metadataURI);\\n    event ContentUpdate(uint256 indexed tokenId, string contentURI);\\n    event RoyaltyUpdate(uint256 indexed tokenId, address indexed payoutAddress);\\n\\n    /// State\\n    struct Data {\\n        string metadataURI;\\n        string contentURI;\\n        address creator;\\n        address royaltyPayout;\\n        uint16 royaltyBPS;\\n    }\\n\\n    /// Private variable to track tokenIds\\n    CountersUpgradeable.Counter private _tokenIdCount;\\n\\n    /// Mappings\\n    mapping(uint256 => Data) private _data;\\n\\n    /// Constructor\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    /// Initialize Function\\n    function initialize(string memory _name, string memory _symbol) public initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n\\n        /// Set the tokenId to start at 1\\n        _tokenIdCount.increment();\\n    }\\n\\n    /// WRITE FUNCTIONS\\n\\n    /**\\n        @notice Burn Function\\n        @param _tokenId: The tokenId to burn\\n        @dev Requires contract admin or creator of token to burn. Emits transfer Event\\n     */\\n    function burn(uint256 _tokenId) external {\\n        require(\\n            (msg.sender == _data[_tokenId].creator && msg.sender == ownerOf(_tokenId)) || msg.sender == owner(),\\n            \\\"Only creator or Admin\\\"\\n        );\\n        _burn(_tokenId);\\n    }\\n\\n    /**\\n        @notice Mint Function\\n        @param _inputData: tuple data of type Data, containing contents of CNFT.\\n        @param _proof: bytes32[] Valid merkle proof for the input creator address.\\n        @return uint256 The tokenId of the minted token.\\n        @dev Mint requires a valid Merkle proof. We use the creator address as the source of truth here.\\n     */\\n    function mint(Data calldata _inputData, bytes32[] calldata _proof) external returns (uint256) {\\n        /// Validate Proof\\n        require(verify(leaf(_inputData.creator), _proof), \\\"!proof\\\");\\n        require(_inputData.royaltyBPS < 10000, \\\"!royalty <10k\\\");\\n\\n        uint256 tokenId = _tokenIdCount.current();\\n        _mint(msg.sender, tokenId);\\n\\n        /// Set Data\\n        _data[tokenId] = Data({\\n            metadataURI: _inputData.metadataURI,\\n            contentURI: _inputData.contentURI,\\n            creator: _inputData.creator,\\n            royaltyPayout: _inputData.royaltyPayout,\\n            royaltyBPS: _inputData.royaltyBPS\\n        });\\n\\n        /// Increment TokenId\\n        _tokenIdCount.increment();\\n        return tokenId;\\n    }\\n\\n    /**\\n        @notice Update ContentURI Function\\n        @param _tokenId: The tokenId to update\\n        @param _contentURI: The new contentURI\\n        @dev Requires contract admin to update.\\n     */\\n    function updateContentURI(uint256 _tokenId, string memory _contentURI) external {\\n        require(msg.sender == owner(), \\\"!admin\\\");\\n        emit ContentUpdate(_tokenId, _contentURI);\\n        _data[_tokenId].contentURI = _contentURI;\\n    }\\n\\n    /**\\n        @notice Update MetadataURI Function\\n        @param _tokenId: The tokenId to update\\n        @param _metadataURI: The new metadataURI\\n        @dev Requires contract admin to update or creator to update. note: potentially exploitable by compromised wallet\\n\\n     */\\n    function updateMetadataURI(uint256 _tokenId, string memory _metadataURI) external {\\n        require(_exists(_tokenId), \\\"!exists\\\");\\n        require(msg.sender == _data[_tokenId].creator || msg.sender == owner(), \\\"!creator or !admin\\\");\\n        emit MetadataUpdate(_tokenId, _metadataURI);\\n        _data[_tokenId].metadataURI = _metadataURI;\\n    }\\n\\n    /**\\n        @notice Update Royalty Info Function\\n        @param _tokenId: The tokenId to update\\n        @param _royaltyPayoutAddress: The new royalty payout address\\n        @dev Requires contract admin to update.\\n     */\\n    function updateRoyaltyInfo(uint256 _tokenId, address _royaltyPayoutAddress) external {\\n        require(msg.sender == owner(), \\\"!admin\\\");\\n        emit RoyaltyUpdate(_tokenId, _royaltyPayoutAddress);\\n        _data[_tokenId].royaltyPayout = _royaltyPayoutAddress;\\n    }\\n\\n    /**\\n        @notice Update Root Function\\n        @param _newRoot: The new Merkle Root\\n        @dev Requires contract admin to update, emits a merkleRootUpdated event.\\n     */\\n    function updateRoot(bytes32 _newRoot) external {\\n        require(msg.sender == owner(), \\\"!admin\\\");\\n        updateMerkleRoot(_newRoot);\\n    }\\n\\n    /// READ FUNCTIONS\\n\\n    /**\\n        @notice Get Creator Function\\n        @param _tokenId: The tokenId to get creator of\\n        @return address The creator of the tokenId\\n     */\\n    function creator(uint256 _tokenId) public view returns (address) {\\n        require(_exists(_tokenId), \\\"!exists\\\");\\n        return _data[_tokenId].creator;\\n    }\\n\\n    /**\\n        @notice Get Royalty Payout Address Function\\n        @param _tokenId: The tokenId to get the royalty payout address for\\n        @return address The royalty payout address\\n    \\n     */\\n    function royaltyPayoutAddress(uint256 _tokenId) public view returns (address) {\\n        require(_exists(_tokenId), \\\"!exists\\\");\\n        return _data[_tokenId].royaltyPayout;\\n    }\\n\\n    /**\\n        @notice Get tokenContentURI Function\\n        @param _tokenId: The tokenId to obtain the content URI from\\n        @return string The content URI of the token\\n     */\\n    function tokenContentURI(uint256 _tokenId) external view returns (string memory) {\\n        return _data[_tokenId].contentURI;\\n    }\\n\\n    /// OVERRIDE FUNCTIONS\\n\\n    /**\\n        @notice Get TokenURI Function\\n        @param _tokenId: The tokenId to get the URI for\\n        @return string The metadataURI of the token\\n        @dev Returns the metadataURI of the token, there is no method for metadataURI()\\n     */\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        return _data[_tokenId].metadataURI;\\n    }\\n\\n    /**\\n        @notice royaltyInfo Function conforms to EIP2981\\n        @param _tokenId: The tokenId to update\\n        @param _salePrice: The new sale price\\n        @return receiver royalty payout address and calculated royalty payment\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        return (_data[_tokenId].royaltyPayout, (_salePrice * _data[_tokenId].royaltyBPS) / 10000);\\n    }\\n\\n    /**\\n        @notice interface Override Function\\n        @param _interfaceId: The interfaceId to check\\n        @return interface type supported\\n     */\\n    function supportsInterface(bytes4 _interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            type(IERC2981Upgradeable).interfaceId == _interfaceId || ERC721Upgradeable.supportsInterface(_interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x0c0ba9a30ae6bf644900542bb84eda2787580ecf0e1d804c22e8e0c914d66d44\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b620011fe1760201c565b15905090565b3b151590565b6123d280620001126000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80636352211e116100f9578063a22cb46511610097578063e985e9c511610071578063e985e9c5146103cd578063f2fde38b14610409578063f8840df61461041c578063fbd8d2831461042f57600080fd5b8063a22cb46514610394578063b88d4fde146103a7578063c87b56dd146103ba57600080fd5b8063715018a6116100d3578063715018a6146103605780638da5cb5b146103685780638fe86b3f1461037957806395d89b411461038c57600080fd5b80636352211e14610327578063669d311c1461033a57806370a082311461034d57600080fd5b80632a55205a1161016657806342966c681161014057806342966c68146102db5780634cd88b76146102ee578063510b515814610301578063514eaa251461031457600080fd5b80632a55205a1461027f5780632eb4a7ab146102b157806342842e0e146102c857600080fd5b8063095ea7b3116101a2578063095ea7b3146102315780630c0a9d261461024657806321ff99701461025957806323b872dd1461026c57600080fd5b806301ffc9a7146101c957806306fdde03146101f1578063081812fc14610206575b600080fd5b6101dc6101d7366004611c64565b610442565b60405190151581526020015b60405180910390f35b6101f961046d565b6040516101e89190611cce565b610219610214366004611ce1565b6104ff565b6040516001600160a01b0390911681526020016101e8565b61024461023f366004611d16565b61058c565b005b6101f9610254366004611ce1565b6106a2565b610244610267366004611ce1565b610747565b61024461027a366004611d40565b61077d565b61029261028d366004611d7c565b6107ae565b604080516001600160a01b0390931683526020830191909152016101e8565b6102ba60c95481565b6040519081526020016101e8565b6102446102d6366004611d40565b6107fc565b6102446102e9366004611ce1565b610817565b6102446102fc366004611e4a565b6108bb565b61021961030f366004611ce1565b610995565b6102ba610322366004611eae565b6109db565b610219610335366004611ce1565b610ca7565b610244610348366004611f50565b610d1e565b6102ba61035b366004611f7c565b610daf565b610244610e36565b6097546001600160a01b0316610219565b610244610387366004611f97565b610e9c565b6101f9610f8b565b6102446103a2366004611fd4565b610f9a565b6102446103b5366004612010565b610fa9565b6101f96103c8366004611ce1565b610fe1565b6101dc6103db36600461208c565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b610244610417366004611f7c565b611069565b61024461042a366004611f97565b611131565b61021961043d366004611ce1565b6111b8565b600063152a902d60e11b6001600160e01b031983161480610467575061046782611204565b92915050565b60606065805461047c906120b6565b80601f01602080910402602001604051908101604052809291908181526020018280546104a8906120b6565b80156104f55780601f106104ca576101008083540402835291602001916104f5565b820191906000526020600020905b8154815290600101906020018083116104d857829003601f168201915b5050505050905090565b600061050a82611254565b6105705760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b600061059782610ca7565b9050806001600160a01b0316836001600160a01b031614156106055760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610567565b336001600160a01b0382161480610621575061062181336103db565b6106935760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610567565b61069d8383611271565b505050565b600081815260cb602052604090206001018054606091906106c2906120b6565b80601f01602080910402602001604051908101604052809291908181526020018280546106ee906120b6565b801561073b5780601f106107105761010080835404028352916020019161073b565b820191906000526020600020905b81548152906001019060200180831161071e57829003601f168201915b50505050509050919050565b6097546001600160a01b031633146107715760405162461bcd60e51b8152600401610567906120f1565b61077a816112df565b50565b610787338261131a565b6107a35760405162461bcd60e51b815260040161056790612111565b61069d838383611400565b600082815260cb602052604081206003015481906001600160a01b03811690612710906107e690600160a01b900461ffff1686612178565b6107f09190612197565b915091505b9250929050565b61069d83838360405180602001604052806000815250610fa9565b600081815260cb60205260409020600201546001600160a01b031633148015610859575061084481610ca7565b6001600160a01b0316336001600160a01b0316145b8061086e57506097546001600160a01b031633145b6108b25760405162461bcd60e51b815260206004820152601560248201527427b7363c9031b932b0ba37b91037b91020b236b4b760591b6044820152606401610567565b61077a816115a0565b600054610100900460ff166108d65760005460ff16156108da565b303b155b61093d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610567565b600054610100900460ff1615801561095f576000805461ffff19166101011790555b610969838361163b565b61097161167c565b61097f60ca80546001019055565b801561069d576000805461ff0019169055505050565b60006109a082611254565b6109bc5760405162461bcd60e51b8152600401610567906121b9565b50600090815260cb60205260409020600201546001600160a01b031690565b6000610a6b610a326109f36060870160408801611f7c565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506116b392505050565b610aa05760405162461bcd60e51b815260206004820152600660248201526510b83937b7b360d11b6044820152606401610567565b612710610ab360a08601608087016121da565b61ffff1610610af45760405162461bcd60e51b815260206004820152600d60248201526c21726f79616c7479203c31306b60981b6044820152606401610567565b6000610aff60ca5490565b9050610b0b33826116c9565b6040805160a0810190915280610b2187806121fe565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602090810190610b6a908801886121fe565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001610bb46060880160408901611f7c565b6001600160a01b03168152602001610bd26080880160608901611f7c565b6001600160a01b03168152602001610bf060a08801608089016121da565b61ffff169052600082815260cb60209081526040909120825180519192610c1c92849290910190611bb5565b506020828101518051610c359260018501920190611bb5565b5060408201516002820180546001600160a01b039283166001600160a01b031990911617905560608301516003909201805460809094015161ffff16600160a01b026001600160b01b03199094169290911691909117919091179055610c9f60ca80546001019055565b949350505050565b6000818152606760205260408120546001600160a01b0316806104675760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610567565b6097546001600160a01b03163314610d485760405162461bcd60e51b8152600401610567906120f1565b6040516001600160a01b0382169083907fb4a0af8ec02f10afaf4a98e65e0f9d223d27a281fde68c387d8c9504e02bae6890600090a3600091825260cb602052604090912060030180546001600160a01b0319166001600160a01b03909216919091179055565b60006001600160a01b038216610e1a5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610567565b506001600160a01b031660009081526068602052604090205490565b6097546001600160a01b03163314610e905760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610567565b610e9a60006117fc565b565b610ea582611254565b610ec15760405162461bcd60e51b8152600401610567906121b9565b600082815260cb60205260409020600201546001600160a01b0316331480610ef357506097546001600160a01b031633145b610f345760405162461bcd60e51b815260206004820152601260248201527110b1b932b0ba37b91037b91010b0b236b4b760711b6044820152606401610567565b817fa7527b31563240d0f5f29d80c2f13916d38a7b2b19b892c43486ed47722f2ffb82604051610f649190611cce565b60405180910390a2600082815260cb60209081526040909120825161069d92840190611bb5565b60606066805461047c906120b6565b610fa533838361184e565b5050565b610fb3338361131a565b610fcf5760405162461bcd60e51b815260040161056790612111565b610fdb8484848461191d565b50505050565b6060610fec82611254565b6110505760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610567565b600082815260cb6020526040902080546106c2906120b6565b6097546001600160a01b031633146110c35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610567565b6001600160a01b0381166111285760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610567565b61077a816117fc565b6097546001600160a01b0316331461115b5760405162461bcd60e51b8152600401610567906120f1565b817f9b3a859fcf43886f9b2bce3697d07bc46d8c83eaaf6b0b61dbbc058f57c99eba8260405161118b9190611cce565b60405180910390a2600082815260cb60209081526040909120825161069d92600190920191840190611bb5565b60006111c382611254565b6111df5760405162461bcd60e51b8152600401610567906121b9565b50600090815260cb60205260409020600301546001600160a01b031690565b3b151590565b60006001600160e01b031982166380ac58cd60e01b148061123557506001600160e01b03198216635b5e139f60e01b145b8061046757506301ffc9a760e01b6001600160e01b0319831614610467565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906112a682610ca7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60c98190556040518181527fa2bc4a36b1e221bdcc16df9d7c15559a5f4f9902519c0f92ad3198f1df005e8b9060200160405180910390a150565b600061132582611254565b6113865760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610567565b600061139183610ca7565b9050806001600160a01b0316846001600160a01b031614806113cc5750836001600160a01b03166113c1846104ff565b6001600160a01b0316145b80610c9f57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff16610c9f565b826001600160a01b031661141382610ca7565b6001600160a01b03161461147b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610567565b6001600160a01b0382166114dd5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610567565b6114e8600082611271565b6001600160a01b0383166000908152606860205260408120805460019290611511908490612245565b90915550506001600160a01b038216600090815260686020526040812080546001929061153f90849061225c565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006115ab82610ca7565b90506115b8600083611271565b6001600160a01b03811660009081526068602052604081208054600192906115e1908490612245565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff166116625760405162461bcd60e51b815260040161056790612274565b61166a611950565b611672611950565b610fa58282611977565b600054610100900460ff166116a35760405162461bcd60e51b815260040161056790612274565b6116ab611950565b610e9a6119c5565b60006116c28260c954856119f5565b9392505050565b6001600160a01b03821661171f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610567565b61172881611254565b156117755760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610567565b6001600160a01b038216600090815260686020526040812080546001929061179e90849061225c565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156118b05760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610567565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611928848484611400565b61193484848484611a0b565b610fdb5760405162461bcd60e51b8152600401610567906122bf565b600054610100900460ff16610e9a5760405162461bcd60e51b815260040161056790612274565b600054610100900460ff1661199e5760405162461bcd60e51b815260040161056790612274565b81516119b1906065906020850190611bb5565b50805161069d906066906020840190611bb5565b600054610100900460ff166119ec5760405162461bcd60e51b815260040161056790612274565b610e9a336117fc565b600082611a028584611b09565b14949350505050565b60006001600160a01b0384163b15611afe57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611a4f903390899088908890600401612311565b6020604051808303816000875af1925050508015611a8a575060408051601f3d908101601f19168201909252611a879181019061234e565b60015b611ae4573d808015611ab8576040519150601f19603f3d011682016040523d82523d6000602084013e611abd565b606091505b508051611adc5760405162461bcd60e51b8152600401610567906122bf565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610c9f565b506001949350505050565b600081815b8451811015611bad576000858281518110611b2b57611b2b61236b565b60200260200101519050808311611b6d576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611b9a565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b5080611ba581612381565b915050611b0e565b509392505050565b828054611bc1906120b6565b90600052602060002090601f016020900481019282611be35760008555611c29565b82601f10611bfc57805160ff1916838001178555611c29565b82800160010185558215611c29579182015b82811115611c29578251825591602001919060010190611c0e565b50611c35929150611c39565b5090565b5b80821115611c355760008155600101611c3a565b6001600160e01b03198116811461077a57600080fd5b600060208284031215611c7657600080fd5b81356116c281611c4e565b6000815180845260005b81811015611ca757602081850181015186830182015201611c8b565b81811115611cb9576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006116c26020830184611c81565b600060208284031215611cf357600080fd5b5035919050565b80356001600160a01b0381168114611d1157600080fd5b919050565b60008060408385031215611d2957600080fd5b611d3283611cfa565b946020939093013593505050565b600080600060608486031215611d5557600080fd5b611d5e84611cfa565b9250611d6c60208501611cfa565b9150604084013590509250925092565b60008060408385031215611d8f57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611dcf57611dcf611d9e565b604051601f8501601f19908116603f01168101908282118183101715611df757611df7611d9e565b81604052809350858152868686011115611e1057600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611e3b57600080fd5b6116c283833560208501611db4565b60008060408385031215611e5d57600080fd5b823567ffffffffffffffff80821115611e7557600080fd5b611e8186838701611e2a565b93506020850135915080821115611e9757600080fd5b50611ea485828601611e2a565b9150509250929050565b600080600060408486031215611ec357600080fd5b833567ffffffffffffffff80821115611edb57600080fd5b9085019060a08288031215611eef57600080fd5b90935060208501359080821115611f0557600080fd5b818601915086601f830112611f1957600080fd5b813581811115611f2857600080fd5b8760208260051b8501011115611f3d57600080fd5b6020830194508093505050509250925092565b60008060408385031215611f6357600080fd5b82359150611f7360208401611cfa565b90509250929050565b600060208284031215611f8e57600080fd5b6116c282611cfa565b60008060408385031215611faa57600080fd5b82359150602083013567ffffffffffffffff811115611fc857600080fd5b611ea485828601611e2a565b60008060408385031215611fe757600080fd5b611ff083611cfa565b91506020830135801515811461200557600080fd5b809150509250929050565b6000806000806080858703121561202657600080fd5b61202f85611cfa565b935061203d60208601611cfa565b925060408501359150606085013567ffffffffffffffff81111561206057600080fd5b8501601f8101871361207157600080fd5b61208087823560208401611db4565b91505092959194509250565b6000806040838503121561209f57600080fd5b6120a883611cfa565b9150611f7360208401611cfa565b600181811c908216806120ca57607f821691505b602082108114156120eb57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526006908201526510b0b236b4b760d11b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561219257612192612162565b500290565b6000826121b457634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600790820152662165786973747360c81b604082015260600190565b6000602082840312156121ec57600080fd5b813561ffff811681146116c257600080fd5b6000808335601e1984360301811261221557600080fd5b83018035915067ffffffffffffffff82111561223057600080fd5b6020019150368190038213156107f557600080fd5b60008282101561225757612257612162565b500390565b6000821982111561226f5761226f612162565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061234490830184611c81565b9695505050505050565b60006020828403121561236057600080fd5b81516116c281611c4e565b634e487b7160e01b600052603260045260246000fd5b600060001982141561239557612395612162565b506001019056fea26469706673582212204cfae7957893e50df3c9085ea6a2c2e24654480a81a6a5b28923bffffa07708b64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80636352211e116100f9578063a22cb46511610097578063e985e9c511610071578063e985e9c5146103cd578063f2fde38b14610409578063f8840df61461041c578063fbd8d2831461042f57600080fd5b8063a22cb46514610394578063b88d4fde146103a7578063c87b56dd146103ba57600080fd5b8063715018a6116100d3578063715018a6146103605780638da5cb5b146103685780638fe86b3f1461037957806395d89b411461038c57600080fd5b80636352211e14610327578063669d311c1461033a57806370a082311461034d57600080fd5b80632a55205a1161016657806342966c681161014057806342966c68146102db5780634cd88b76146102ee578063510b515814610301578063514eaa251461031457600080fd5b80632a55205a1461027f5780632eb4a7ab146102b157806342842e0e146102c857600080fd5b8063095ea7b3116101a2578063095ea7b3146102315780630c0a9d261461024657806321ff99701461025957806323b872dd1461026c57600080fd5b806301ffc9a7146101c957806306fdde03146101f1578063081812fc14610206575b600080fd5b6101dc6101d7366004611c64565b610442565b60405190151581526020015b60405180910390f35b6101f961046d565b6040516101e89190611cce565b610219610214366004611ce1565b6104ff565b6040516001600160a01b0390911681526020016101e8565b61024461023f366004611d16565b61058c565b005b6101f9610254366004611ce1565b6106a2565b610244610267366004611ce1565b610747565b61024461027a366004611d40565b61077d565b61029261028d366004611d7c565b6107ae565b604080516001600160a01b0390931683526020830191909152016101e8565b6102ba60c95481565b6040519081526020016101e8565b6102446102d6366004611d40565b6107fc565b6102446102e9366004611ce1565b610817565b6102446102fc366004611e4a565b6108bb565b61021961030f366004611ce1565b610995565b6102ba610322366004611eae565b6109db565b610219610335366004611ce1565b610ca7565b610244610348366004611f50565b610d1e565b6102ba61035b366004611f7c565b610daf565b610244610e36565b6097546001600160a01b0316610219565b610244610387366004611f97565b610e9c565b6101f9610f8b565b6102446103a2366004611fd4565b610f9a565b6102446103b5366004612010565b610fa9565b6101f96103c8366004611ce1565b610fe1565b6101dc6103db36600461208c565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b610244610417366004611f7c565b611069565b61024461042a366004611f97565b611131565b61021961043d366004611ce1565b6111b8565b600063152a902d60e11b6001600160e01b031983161480610467575061046782611204565b92915050565b60606065805461047c906120b6565b80601f01602080910402602001604051908101604052809291908181526020018280546104a8906120b6565b80156104f55780601f106104ca576101008083540402835291602001916104f5565b820191906000526020600020905b8154815290600101906020018083116104d857829003601f168201915b5050505050905090565b600061050a82611254565b6105705760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b600061059782610ca7565b9050806001600160a01b0316836001600160a01b031614156106055760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610567565b336001600160a01b0382161480610621575061062181336103db565b6106935760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610567565b61069d8383611271565b505050565b600081815260cb602052604090206001018054606091906106c2906120b6565b80601f01602080910402602001604051908101604052809291908181526020018280546106ee906120b6565b801561073b5780601f106107105761010080835404028352916020019161073b565b820191906000526020600020905b81548152906001019060200180831161071e57829003601f168201915b50505050509050919050565b6097546001600160a01b031633146107715760405162461bcd60e51b8152600401610567906120f1565b61077a816112df565b50565b610787338261131a565b6107a35760405162461bcd60e51b815260040161056790612111565b61069d838383611400565b600082815260cb602052604081206003015481906001600160a01b03811690612710906107e690600160a01b900461ffff1686612178565b6107f09190612197565b915091505b9250929050565b61069d83838360405180602001604052806000815250610fa9565b600081815260cb60205260409020600201546001600160a01b031633148015610859575061084481610ca7565b6001600160a01b0316336001600160a01b0316145b8061086e57506097546001600160a01b031633145b6108b25760405162461bcd60e51b815260206004820152601560248201527427b7363c9031b932b0ba37b91037b91020b236b4b760591b6044820152606401610567565b61077a816115a0565b600054610100900460ff166108d65760005460ff16156108da565b303b155b61093d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610567565b600054610100900460ff1615801561095f576000805461ffff19166101011790555b610969838361163b565b61097161167c565b61097f60ca80546001019055565b801561069d576000805461ff0019169055505050565b60006109a082611254565b6109bc5760405162461bcd60e51b8152600401610567906121b9565b50600090815260cb60205260409020600201546001600160a01b031690565b6000610a6b610a326109f36060870160408801611f7c565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506116b392505050565b610aa05760405162461bcd60e51b815260206004820152600660248201526510b83937b7b360d11b6044820152606401610567565b612710610ab360a08601608087016121da565b61ffff1610610af45760405162461bcd60e51b815260206004820152600d60248201526c21726f79616c7479203c31306b60981b6044820152606401610567565b6000610aff60ca5490565b9050610b0b33826116c9565b6040805160a0810190915280610b2187806121fe565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602090810190610b6a908801886121fe565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001610bb46060880160408901611f7c565b6001600160a01b03168152602001610bd26080880160608901611f7c565b6001600160a01b03168152602001610bf060a08801608089016121da565b61ffff169052600082815260cb60209081526040909120825180519192610c1c92849290910190611bb5565b506020828101518051610c359260018501920190611bb5565b5060408201516002820180546001600160a01b039283166001600160a01b031990911617905560608301516003909201805460809094015161ffff16600160a01b026001600160b01b03199094169290911691909117919091179055610c9f60ca80546001019055565b949350505050565b6000818152606760205260408120546001600160a01b0316806104675760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610567565b6097546001600160a01b03163314610d485760405162461bcd60e51b8152600401610567906120f1565b6040516001600160a01b0382169083907fb4a0af8ec02f10afaf4a98e65e0f9d223d27a281fde68c387d8c9504e02bae6890600090a3600091825260cb602052604090912060030180546001600160a01b0319166001600160a01b03909216919091179055565b60006001600160a01b038216610e1a5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610567565b506001600160a01b031660009081526068602052604090205490565b6097546001600160a01b03163314610e905760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610567565b610e9a60006117fc565b565b610ea582611254565b610ec15760405162461bcd60e51b8152600401610567906121b9565b600082815260cb60205260409020600201546001600160a01b0316331480610ef357506097546001600160a01b031633145b610f345760405162461bcd60e51b815260206004820152601260248201527110b1b932b0ba37b91037b91010b0b236b4b760711b6044820152606401610567565b817fa7527b31563240d0f5f29d80c2f13916d38a7b2b19b892c43486ed47722f2ffb82604051610f649190611cce565b60405180910390a2600082815260cb60209081526040909120825161069d92840190611bb5565b60606066805461047c906120b6565b610fa533838361184e565b5050565b610fb3338361131a565b610fcf5760405162461bcd60e51b815260040161056790612111565b610fdb8484848461191d565b50505050565b6060610fec82611254565b6110505760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610567565b600082815260cb6020526040902080546106c2906120b6565b6097546001600160a01b031633146110c35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610567565b6001600160a01b0381166111285760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610567565b61077a816117fc565b6097546001600160a01b0316331461115b5760405162461bcd60e51b8152600401610567906120f1565b817f9b3a859fcf43886f9b2bce3697d07bc46d8c83eaaf6b0b61dbbc058f57c99eba8260405161118b9190611cce565b60405180910390a2600082815260cb60209081526040909120825161069d92600190920191840190611bb5565b60006111c382611254565b6111df5760405162461bcd60e51b8152600401610567906121b9565b50600090815260cb60205260409020600301546001600160a01b031690565b3b151590565b60006001600160e01b031982166380ac58cd60e01b148061123557506001600160e01b03198216635b5e139f60e01b145b8061046757506301ffc9a760e01b6001600160e01b0319831614610467565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906112a682610ca7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60c98190556040518181527fa2bc4a36b1e221bdcc16df9d7c15559a5f4f9902519c0f92ad3198f1df005e8b9060200160405180910390a150565b600061132582611254565b6113865760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610567565b600061139183610ca7565b9050806001600160a01b0316846001600160a01b031614806113cc5750836001600160a01b03166113c1846104ff565b6001600160a01b0316145b80610c9f57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff16610c9f565b826001600160a01b031661141382610ca7565b6001600160a01b03161461147b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610567565b6001600160a01b0382166114dd5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610567565b6114e8600082611271565b6001600160a01b0383166000908152606860205260408120805460019290611511908490612245565b90915550506001600160a01b038216600090815260686020526040812080546001929061153f90849061225c565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006115ab82610ca7565b90506115b8600083611271565b6001600160a01b03811660009081526068602052604081208054600192906115e1908490612245565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff166116625760405162461bcd60e51b815260040161056790612274565b61166a611950565b611672611950565b610fa58282611977565b600054610100900460ff166116a35760405162461bcd60e51b815260040161056790612274565b6116ab611950565b610e9a6119c5565b60006116c28260c954856119f5565b9392505050565b6001600160a01b03821661171f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610567565b61172881611254565b156117755760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610567565b6001600160a01b038216600090815260686020526040812080546001929061179e90849061225c565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156118b05760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610567565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611928848484611400565b61193484848484611a0b565b610fdb5760405162461bcd60e51b8152600401610567906122bf565b600054610100900460ff16610e9a5760405162461bcd60e51b815260040161056790612274565b600054610100900460ff1661199e5760405162461bcd60e51b815260040161056790612274565b81516119b1906065906020850190611bb5565b50805161069d906066906020840190611bb5565b600054610100900460ff166119ec5760405162461bcd60e51b815260040161056790612274565b610e9a336117fc565b600082611a028584611b09565b14949350505050565b60006001600160a01b0384163b15611afe57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611a4f903390899088908890600401612311565b6020604051808303816000875af1925050508015611a8a575060408051601f3d908101601f19168201909252611a879181019061234e565b60015b611ae4573d808015611ab8576040519150601f19603f3d011682016040523d82523d6000602084013e611abd565b606091505b508051611adc5760405162461bcd60e51b8152600401610567906122bf565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610c9f565b506001949350505050565b600081815b8451811015611bad576000858281518110611b2b57611b2b61236b565b60200260200101519050808311611b6d576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611b9a565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b5080611ba581612381565b915050611b0e565b509392505050565b828054611bc1906120b6565b90600052602060002090601f016020900481019282611be35760008555611c29565b82601f10611bfc57805160ff1916838001178555611c29565b82800160010185558215611c29579182015b82811115611c29578251825591602001919060010190611c0e565b50611c35929150611c39565b5090565b5b80821115611c355760008155600101611c3a565b6001600160e01b03198116811461077a57600080fd5b600060208284031215611c7657600080fd5b81356116c281611c4e565b6000815180845260005b81811015611ca757602081850181015186830182015201611c8b565b81811115611cb9576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006116c26020830184611c81565b600060208284031215611cf357600080fd5b5035919050565b80356001600160a01b0381168114611d1157600080fd5b919050565b60008060408385031215611d2957600080fd5b611d3283611cfa565b946020939093013593505050565b600080600060608486031215611d5557600080fd5b611d5e84611cfa565b9250611d6c60208501611cfa565b9150604084013590509250925092565b60008060408385031215611d8f57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611dcf57611dcf611d9e565b604051601f8501601f19908116603f01168101908282118183101715611df757611df7611d9e565b81604052809350858152868686011115611e1057600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611e3b57600080fd5b6116c283833560208501611db4565b60008060408385031215611e5d57600080fd5b823567ffffffffffffffff80821115611e7557600080fd5b611e8186838701611e2a565b93506020850135915080821115611e9757600080fd5b50611ea485828601611e2a565b9150509250929050565b600080600060408486031215611ec357600080fd5b833567ffffffffffffffff80821115611edb57600080fd5b9085019060a08288031215611eef57600080fd5b90935060208501359080821115611f0557600080fd5b818601915086601f830112611f1957600080fd5b813581811115611f2857600080fd5b8760208260051b8501011115611f3d57600080fd5b6020830194508093505050509250925092565b60008060408385031215611f6357600080fd5b82359150611f7360208401611cfa565b90509250929050565b600060208284031215611f8e57600080fd5b6116c282611cfa565b60008060408385031215611faa57600080fd5b82359150602083013567ffffffffffffffff811115611fc857600080fd5b611ea485828601611e2a565b60008060408385031215611fe757600080fd5b611ff083611cfa565b91506020830135801515811461200557600080fd5b809150509250929050565b6000806000806080858703121561202657600080fd5b61202f85611cfa565b935061203d60208601611cfa565b925060408501359150606085013567ffffffffffffffff81111561206057600080fd5b8501601f8101871361207157600080fd5b61208087823560208401611db4565b91505092959194509250565b6000806040838503121561209f57600080fd5b6120a883611cfa565b9150611f7360208401611cfa565b600181811c908216806120ca57607f821691505b602082108114156120eb57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526006908201526510b0b236b4b760d11b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561219257612192612162565b500290565b6000826121b457634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600790820152662165786973747360c81b604082015260600190565b6000602082840312156121ec57600080fd5b813561ffff811681146116c257600080fd5b6000808335601e1984360301811261221557600080fd5b83018035915067ffffffffffffffff82111561223057600080fd5b6020019150368190038213156107f557600080fd5b60008282101561225757612257612162565b500390565b6000821982111561226f5761226f612162565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061234490830184611c81565b9695505050505050565b60006020828403121561236057600080fd5b81516116c281611c4e565b634e487b7160e01b600052603260045260246000fd5b600060001982141561239557612395612162565b506001019056fea26469706673582212204cfae7957893e50df3c9085ea6a2c2e24654480a81a6a5b28923bffffa07708b64736f6c634300080a0033",
  "devdoc": {
    "author": "@bretth18 (COMPUTER DATA) of @catalogworks",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Requires contract admin or creator of token to burn. Emits transfer Event",
        "params": {
          "_tokenId": ": The tokenId to burn"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "creator(uint256)": {
        "params": {
          "_tokenId": ": The tokenId to get creator of"
        },
        "returns": {
          "_0": "address The creator of the tokenId"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint((string,string,address,address,uint16),bytes32[])": {
        "details": "Mint requires a valid Merkle proof. We use the creator address as the source of truth here.",
        "params": {
          "_inputData": ": tuple data of type Data, containing contents of CNFT.",
          "_proof": ": bytes32[] Valid merkle proof for the input creator address."
        },
        "returns": {
          "_0": "uint256 The tokenId of the minted token."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "_salePrice": ": The new sale price",
          "_tokenId": ": The tokenId to update"
        },
        "returns": {
          "receiver": "royalty payout address and calculated royalty payment"
        }
      },
      "royaltyPayoutAddress(uint256)": {
        "params": {
          "_tokenId": ": The tokenId to get the royalty payout address for"
        },
        "returns": {
          "_0": "address The royalty payout address"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceId": ": The interfaceId to check"
        },
        "returns": {
          "_0": "interface type supported"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenContentURI(uint256)": {
        "params": {
          "_tokenId": ": The tokenId to obtain the content URI from"
        },
        "returns": {
          "_0": "string The content URI of the token"
        }
      },
      "tokenURI(uint256)": {
        "details": "Returns the metadataURI of the token, there is no method for metadataURI()",
        "params": {
          "_tokenId": ": The tokenId to get the URI for"
        },
        "returns": {
          "_0": "string The metadataURI of the token"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateContentURI(uint256,string)": {
        "details": "Requires contract admin to update.",
        "params": {
          "_contentURI": ": The new contentURI",
          "_tokenId": ": The tokenId to update"
        }
      },
      "updateMetadataURI(uint256,string)": {
        "details": "Requires contract admin to update or creator to update. note: potentially exploitable by compromised wallet",
        "params": {
          "_metadataURI": ": The new metadataURI",
          "_tokenId": ": The tokenId to update"
        }
      },
      "updateRoot(bytes32)": {
        "details": "Requires contract admin to update, emits a merkleRootUpdated event.",
        "params": {
          "_newRoot": ": The new Merkle Root"
        }
      },
      "updateRoyaltyInfo(uint256,address)": {
        "details": "Requires contract admin to update.",
        "params": {
          "_royaltyPayoutAddress": ": The new royalty payout address",
          "_tokenId": ": The tokenId to update"
        }
      }
    },
    "title": "TR909",
    "version": 1
  },
  "userdoc": {
    "events": {
      "MetadataUpdate(uint256,string)": {
        "notice": "Event"
      },
      "merkleRootUpdated(bytes32)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Burn Function"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "creator(uint256)": {
        "notice": "Get Creator Function"
      },
      "initialize(string,string)": {
        "notice": "Initialize Function"
      },
      "merkleRoot()": {
        "notice": "State variable containing merkle root see {IAngelaList}"
      },
      "mint((string,string,address,address,uint16),bytes32[])": {
        "notice": "Mint Function"
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "royaltyInfo Function conforms to EIP2981"
      },
      "royaltyPayoutAddress(uint256)": {
        "notice": "Get Royalty Payout Address Function"
      },
      "supportsInterface(bytes4)": {
        "notice": "interface Override Function"
      },
      "tokenContentURI(uint256)": {
        "notice": "Get tokenContentURI Function"
      },
      "tokenURI(uint256)": {
        "notice": "Get TokenURI Function"
      },
      "updateContentURI(uint256,string)": {
        "notice": "Update ContentURI Function"
      },
      "updateMetadataURI(uint256,string)": {
        "notice": "Update MetadataURI Function"
      },
      "updateRoot(bytes32)": {
        "notice": "Update Root Function"
      },
      "updateRoyaltyInfo(uint256,address)": {
        "notice": "Update Royalty Info Function"
      }
    },
    "notice": "-------------------------------------------------------------------------------------------------------------------- ______  ____       __      __      __ /\\__  _\\/\\  _`\\   /'_ `\\  /'__`\\  /'_ `\\ \\/_/\\ \\/\\ \\ \\L\\ \\/\\ \\L\\ \\/\\ \\/\\ \\/\\ \\L\\ \\ \\ \\ \\ \\ \\ ,  /\\ \\___, \\ \\ \\ \\ \\ \\___, \\ \\ \\ \\ \\ \\ \\\\ \\\\/__,/\\ \\ \\ \\_\\ \\/__,/\\ \\ \\ \\_\\ \\ \\_\\ \\_\\   \\ \\_\\ \\____/    \\ \\_\\ \\/_/  \\/_/\\/ /    \\/_/\\/___/      \\/_/************************************************ LEGAL DISCLAIMER: https://catalog.works/termsatalog Shared Creator Contract (CNFT), v2(TR909). This is an upgradeable ERC721 contract, with a access control restrictions for a given Admin address. Purpose built for optimization over the original Zora V1 isian (Iaian Nash) of Zora for help with this implementation. ---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 564,
        "contract": "contracts/catalog/TR909.sol:TR909",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 567,
        "contract": "contracts/catalog/TR909.sol:TR909",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1941,
        "contract": "contracts/catalog/TR909.sol:TR909",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2352,
        "contract": "contracts/catalog/TR909.sol:TR909",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 660,
        "contract": "contracts/catalog/TR909.sol:TR909",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 662,
        "contract": "contracts/catalog/TR909.sol:TR909",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 666,
        "contract": "contracts/catalog/TR909.sol:TR909",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 670,
        "contract": "contracts/catalog/TR909.sol:TR909",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 674,
        "contract": "contracts/catalog/TR909.sol:TR909",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 680,
        "contract": "contracts/catalog/TR909.sol:TR909",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1491,
        "contract": "contracts/catalog/TR909.sol:TR909",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/catalog/TR909.sol:TR909",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 534,
        "contract": "contracts/catalog/TR909.sol:TR909",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2373,
        "contract": "contracts/catalog/TR909.sol:TR909",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "201",
        "type": "t_bytes32"
      },
      {
        "astId": 3378,
        "contract": "contracts/catalog/TR909.sol:TR909",
        "label": "_tokenIdCount",
        "offset": 0,
        "slot": "202",
        "type": "t_struct(Counter)1948_storage"
      },
      {
        "astId": 3384,
        "contract": "contracts/catalog/TR909.sol:TR909",
        "label": "_data",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_struct(Data)3374_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Data)3374_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TR909.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)3374_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1948_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1947,
            "contract": "contracts/catalog/TR909.sol:TR909",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Data)3374_storage": {
        "encoding": "inplace",
        "label": "struct TR909.Data",
        "members": [
          {
            "astId": 3365,
            "contract": "contracts/catalog/TR909.sol:TR909",
            "label": "metadataURI",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3367,
            "contract": "contracts/catalog/TR909.sol:TR909",
            "label": "contentURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3369,
            "contract": "contracts/catalog/TR909.sol:TR909",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3371,
            "contract": "contracts/catalog/TR909.sol:TR909",
            "label": "royaltyPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3373,
            "contract": "contracts/catalog/TR909.sol:TR909",
            "label": "royaltyBPS",
            "offset": 20,
            "slot": "3",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}