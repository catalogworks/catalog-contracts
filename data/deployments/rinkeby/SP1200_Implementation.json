{
  "address": "0x9Aeee4FC8B4427689eb839521Fe9DaCFa9c849b7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentURI",
          "type": "string"
        }
      ],
      "name": "ContentUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "MetadataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payoutAddress",
          "type": "address"
        }
      ],
      "name": "RoyaltyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "merkleRootUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BURNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TREE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contentURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "royaltyPayout",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "royaltyBPS",
              "type": "uint16"
            }
          ],
          "internalType": "struct SP1200.TokenData",
          "name": "_data",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "royaltyPayoutAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenContentURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_contentURI",
          "type": "string"
        }
      ],
      "name": "updateContentURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        }
      ],
      "name": "updateMetadataURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_newRoot",
          "type": "bytes32"
        }
      ],
      "name": "updateRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_royaltyPayoutAddress",
          "type": "address"
        }
      ],
      "name": "updateRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xddb8f3173fa187a3285312b9552b45344055ebcc8747aa4439ce06e2976f36b0",
  "receipt": {
    "to": null,
    "from": "0x723aAe1AD495f0b804624bc507741c08F214fba2",
    "contractAddress": "0x9Aeee4FC8B4427689eb839521Fe9DaCFa9c849b7",
    "transactionIndex": 7,
    "gasUsed": "2276674",
    "logsBloom": "0x
    "blockHash": "0x5d3fc9187334693e17d610597b875ba9c5c20b3c6f484ba7d7be1e91183c1c88",
    "transactionHash": "0xddb8f3173fa187a3285312b9552b45344055ebcc8747aa4439ce06e2976f36b0",
    "logs": [],
    "blockNumber": 9974467,
    "cumulativeGasUsed": "4830553",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "04dd7ea9f6723d2d4eec14cfc129224d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"}],\"name\":\"ContentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"MetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"RoyaltyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"merkleRootUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyPayout\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royaltyBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct SP1200.TokenData\",\"name\":\"_data\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"royaltyPayoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenContentURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_contentURI\",\"type\":\"string\"}],\"name\":\"updateContentURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"updateMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newRoot\",\"type\":\"bytes32\"}],\"name\":\"updateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_royaltyPayoutAddress\",\"type\":\"address\"}],\"name\":\"updateRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\":   @bretth18 (computerdata) of @catalogworks\",\"details\":\":   Upgradeable ERC721 Contract. This version is for testing an alternative burn method and features role based permissions.  Purpose built for optmization over the Zora V1 contracts. isian (iain nash) of Zora.  ---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"requires sender to be creator or have BURNER_ROLE\",\"params\":{\"_tokenId\":\"uint256 identifier of token to burn\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"creator(uint256)\":{\"details\":\"idk what this should be called, and do we need?\",\"params\":{\"_tokenId\":\"uint256 identifier of token to get creator for\"},\"returns\":{\"_0\":\"address creator of given tokenId\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(string,string)\":{\"details\":\"Initializes contract with default values, acts as a constructor. Necessary for OZ proxy\",\"params\":{\"_name\":\"string name of the contract\",\"_symbol\":\"string symbol of the contract\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint((string,string,address,address,uint16),bytes32[])\":{\"details\":\"mints a new token to allowlisted msg.sender with a valid merkle proof. params can and should be changed to calldata for gas efficiency. rename to \\\"allowlist\\\"\",\"params\":{\"_data\":\"TokenData struct, see ITB303\",\"_proof\":\"bytes32[] merkle proof of artist wallet.  this is created off-chain.  e.g (proof = tree.getHexProof(keccak256(address)))\"},\"returns\":{\"_0\":\"uint256 tokenId of minted token (useful since we are not using Enumerable)\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"override, conforms to EIP-2981\",\"params\":{\"_salePrice\":\"uint256 final sale price of token used to calculate royalty payout\",\"_tokenId\":\"uint256 token id corresponding to the token of which to get royalty information\"}},\"royaltyPayoutAddress(uint256)\":{\"details\":\"not part of EIP2981, but useful \",\"params\":{\"_tokenId\":\"uint256 identifier of token to get royalty payout address for\"},\"returns\":{\"_0\":\"address royalty payout address of given tokenId\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"override \",\"params\":{\"interfaceId\":\"bytes4 id of interface to check\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenContentURI(uint256)\":{\"details\":\"basic public getter method for content URI\",\"params\":{\"_tokenId\":\"uint256 identifier of token to get content URI for\"},\"returns\":{\"_0\":\"string content URI for given tokenId\"}},\"tokenURI(uint256)\":{\"details\":\"override function, returns metadataURI of token stored in tokenData\",\"params\":{\"_tokenId\":\"uint256 token id corresponding to the token of which to get metadata from\"},\"returns\":{\"_0\":\"string containing metadata URI\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"updateContentURI(uint256,string)\":{\"details\":\"access controlled function, restricted to owner/admim. subject to change.\",\"params\":{\"_contentURI\":\"string containing new/updated media content (subject to change, new EIP)\",\"_tokenId\":\"uint256 token id corresponding to the token to update\"}},\"updateMetadataURI(uint256,string)\":{\"details\":\"access controlled, restricted to contract owner  when they own the tokenId or the creator (when they own the token)\",\"params\":{\"_metadataURI\":\"string containing new/updated metadata (e.g IPFS URI pointing to metadata.json)\",\"_tokenId\":\"uint256 token id corresponding to the token to update\"}},\"updateRoot(bytes32)\":{\"details\":\"access controlled function, restricted to owner/admim.\",\"params\":{\"_newRoot\":\"bytes32 containing the new root hash, generated off-chain\"}},\"updateRoyaltyInfo(uint256,address)\":{\"details\":\"access controlled to owner only, subject to change.  this function allows for emergency royalty control (i.e compromised wallet)\",\"params\":{\"_royaltyPayoutAddress\":\"address of new royalty payout address\",\"_tokenId\":\"uint256 token id corresponding to the token of which to update royalty payout\"}}},\"title\":\":   SP1200\",\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdated(uint256,string)\":{\"notice\":\"Events\"},\"merkleRootUpdated(bytes32)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burn FunctionBurns a token\"},\"creator(uint256)\":{\"notice\":\"creator Functiongets the creator of a token\"},\"initialize(string,string)\":{\"notice\":\"initialize FunctionInitializes contract with default values, acts as a constructor\"},\"merkleRoot()\":{\"notice\":\"State variable containing merkle root see {IAngelaList}\"},\"mint((string,string,address,address,uint16),bytes32[])\":{\"notice\":\"mint Functionmints a new token\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"royaltyInfo Functionoverride function gets royalty information for a token (EIP-2981)\"},\"royaltyPayoutAddress(uint256)\":{\"notice\":\"royaltyPayoutAddress Functiongets the address of the royalty payout for a token\"},\"supportsInterface(bytes4)\":{\"notice\":\"supportsInterface Functionoverride function to check if contract supports an interface\"},\"tokenContentURI(uint256)\":{\"notice\":\"tokenContentURI Functiongets the URI of the content of a token. subject to change pending EIP draft\"},\"tokenURI(uint256)\":{\"notice\":\"tokenURI Functionoverride function to get the URI of a token. returns stored metadataURI\"},\"updateContentURI(uint256,string)\":{\"notice\":\"updateContentURI Functionupdates the content URI of a token, emits an event\"},\"updateMetadataURI(uint256,string)\":{\"notice\":\"updateMetadataURI Functionupdates the metadata URI of a token, emits an event\"},\"updateRoot(bytes32)\":{\"notice\":\"updateRoot Functionupdates the merkleroot of the allowlistthis function is inherits from Angela.sol, and may not be necessary depending on role based configuration.\"},\"updateRoyaltyInfo(uint256,address)\":{\"notice\":\"updateRoyaltyInfo Functionupdates the royalty payout address and royalty BPS of a token, emits an event\"}},\"notice\":\"-------------------------------------------------------------------------------------------------------------------- ____    ____       _      ___       __      __ /\\\\  _`\\\\ /\\\\  _`\\\\   /' \\\\   /'___`\\\\   /'__`\\\\  /'__`\\\\ \\\\ \\\\,\\\\L\\\\_\\\\ \\\\ \\\\L\\\\ \\\\/\\\\_, \\\\ /\\\\_\\\\ /\\\\ \\\\ /\\\\ \\\\/\\\\ \\\\/\\\\ \\\\/\\\\ \\\\ \\\\/_\\\\__ \\\\\\\\ \\\\ ,__/\\\\/_/\\\\ \\\\\\\\/_/// /__\\\\ \\\\ \\\\ \\\\ \\\\ \\\\ \\\\ \\\\ \\\\ /\\\\ \\\\L\\\\ \\\\ \\\\ \\\\/    \\\\ \\\\ \\\\  // /_\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\ \\\\ \\\\_\\\\ \\\\ \\\\ `\\\\____\\\\ \\\\_\\\\     \\\\ \\\\_\\\\/\\\\______/ \\\\ \\\\____/\\\\ \\\\____/ \\\\/_____/\\\\/_/      \\\\/_/\\\\/_____/   \\\\/___/  \\\\/___/************************************************ LEGAL DISCLAIMER: https://catalog.works/terms************************************************ ---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                            RINKEBY CNFT (V2.1: CODENAME \\\"SP1200\\\") \\\"SP1200\\\"                    :   Creator Shared NFT Media Contract for Catalog Records Inc.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/catalog/SP1200.sol\":\"SP1200\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x121966b3220d263a6669dcf59c1254bd48ed237adf4d8a595add70a7927eada1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x34a68a6915f19a764a8ce8e6fdc6bf259744a6142afe478072ada07d65cf65d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x6c25d4211724a6f4cdc8d25397edc780f48d951fc81c1d507f59b3edb22afaf7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0xaa4ae4f717c8fd3595482206f8af5e48bbec295f7c5d4e5d3a36b75b80014701\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/AngelaList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport {MerkleProofUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\n\\n/**\\n--------------------------------------------------------------------------------------------------------------------\\n                                                                                        \\n     o                                         o888             ooooo       o88                o8   \\n    888     oo oooooo     oooooooo8 ooooooooo8  888   ooooooo    888        oooo   oooooooo8 o888oo \\n   8  88     888   888  888    88o 888oooooo8   888   ooooo888   888         888  888ooooooo  888   \\n  8oooo88    888   888   888oo888o 888          888 888    888   888      o  888          888 888   \\no88o  o888o o888o o888o 888     888  88oooo888 o888o 88ooo88 8o o888ooooo88 o888o 88oooooo88   888o \\n                         888ooo888       \\n\\n\\\"heute nicht\\\" - Angela Merkel                                                                                                                                                                                                                                                                                                                                                                                                                                       \\n---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \\nTESTNET WIP\\n\\\"AngelaList\\\"                :   Allowlist utility merkle proof contract\\n@author                     :   @bretth18 (computerdata) \\n@title                      :   AngelaList\\n@dev                        :   n/a\\n */\\n\\ncontract AngelaList {\\n    /// State variable containing merkle root\\n    /// see {IAngelaList}\\n    bytes32 public merkleRoot;\\n\\n    /// Events\\n    event merkleRootUpdated(bytes32 _merkleRoot);\\n\\n    /// update merkle root\\n    function updateMerkleRoot(bytes32 _newRoot) internal {\\n        merkleRoot = _newRoot;\\n        emit merkleRootUpdated(merkleRoot);\\n    }\\n\\n    /// return leaf\\n    function leaf(address _account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account));\\n    }\\n\\n    /// verify proof\\n    function verify(bytes32 _leaf, bytes32[] memory _proof) internal view returns (bool) {\\n        return MerkleProofUpgradeable.verify(_proof, merkleRoot, _leaf);\\n    }\\n}\\n\",\"keccak256\":\"0xcc8c87f434d72f4ba25da0194f58555cd2f9d7e0de3f21f92781d2c98fdef4b0\",\"license\":\"MIT\"},\"contracts/catalog/SP1200.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport {AngelaList} from \\\"../AngelaList.sol\\\";\\n\\n/**\\n--------------------------------------------------------------------------------------------------------------------\\n\\n ____    ____       _      ___       __      __\\n/\\\\  _`\\\\ /\\\\  _`\\\\   /' \\\\   /'___`\\\\   /'__`\\\\  /'__`\\\\\\n\\\\ \\\\,\\\\L\\\\_\\\\ \\\\ \\\\L\\\\ \\\\/\\\\_, \\\\ /\\\\_\\\\ /\\\\ \\\\ /\\\\ \\\\/\\\\ \\\\/\\\\ \\\\/\\\\ \\\\\\n \\\\/_\\\\__ \\\\\\\\ \\\\ ,__/\\\\/_/\\\\ \\\\\\\\/_/// /__\\\\ \\\\ \\\\ \\\\ \\\\ \\\\ \\\\ \\\\ \\\\\\n   /\\\\ \\\\L\\\\ \\\\ \\\\ \\\\/    \\\\ \\\\ \\\\  // /_\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\ \\\\ \\\\_\\\\ \\\\\\n   \\\\ `\\\\____\\\\ \\\\_\\\\     \\\\ \\\\_\\\\/\\\\______/ \\\\ \\\\____/\\\\ \\\\____/\\n    \\\\/_____/\\\\/_/      \\\\/_/\\\\/_____/   \\\\/___/  \\\\/___/\\n\\n************************************************\\nLEGAL DISCLAIMER:\\nhttps://catalog.works/terms\\n************************************************\\n\\n---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \\nRINKEBY CNFT (V2.1: CODENAME \\\"SP1200\\\")\\n\\\"SP1200\\\"                    :   Creator Shared NFT Media Contract for Catalog Records Inc.\\n@author                     :   @bretth18 (computerdata) of @catalogworks\\n@title                      :   SP1200\\n@dev                        :   Upgradeable ERC721 Contract. This version is for testing an alternative burn method\\n                                and features role based permissions. \\n                                Purpose built for optmization over the Zora V1 contracts.\\n                                Code relies heavily on implementations thanks to @ isian (iain nash) of Zora. \\n---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \\n */\\ncontract SP1200 is ERC721Upgradeable, IERC2981Upgradeable, AccessControlUpgradeable, AngelaList {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    /// Events\\n    event MetadataUpdated(uint256 indexed tokenId, string metadataURI);\\n    event ContentUpdated(uint256 indexed tokenId, string contentURI);\\n    event RoyaltyUpdated(uint256 indexed tokenId, address indexed payoutAddress);\\n\\n    // Roles\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n    bytes32 public constant TREE_ROLE = keccak256(\\\"TREE_ROLE\\\");\\n\\n    /// State\\n    struct TokenData {\\n        string metadataURI;\\n        string contentURI;\\n        address creator;\\n        address royaltyPayout;\\n        uint16 royaltyBPS;\\n    }\\n\\n    /// Mappings\\n    /// Maps tokenId to data struct\\n    mapping(uint256 => TokenData) private tokenData;\\n\\n    // Tracking token Id\\n    CountersUpgradeable.Counter private _tokenIdCounter;\\n\\n    /// Modifiers\\n    modifier tokenExists(uint256 _tokenId) {\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    /**\\n        initialize Function\\n        @notice Initializes contract with default values, acts as a constructor\\n        @param _name string name of the contract\\n        @param _symbol string symbol of the contract\\n        @dev Initializes contract with default values, acts as a constructor. Necessary for OZ proxy\\n     */\\n\\n    function initialize(string memory _name, string memory _symbol) public initializer {\\n        __ERC721_init(_name, _symbol);\\n        __AccessControl_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(BURNER_ROLE, msg.sender);\\n        _grantRole(TREE_ROLE, msg.sender);\\n\\n        // Set tokenId to start @ 1\\n        _tokenIdCounter.increment();\\n    }\\n\\n    /**\\n        Burn Function\\n        @notice Burns a token\\n        @param _tokenId uint256 identifier of token to burn\\n        @dev requires sender to be creator or have BURNER_ROLE\\n     */\\n    function burn(uint256 _tokenId) external {\\n        require(\\n            msg.sender == tokenData[_tokenId].creator || hasRole(BURNER_ROLE, msg.sender),\\n            \\\"Only creator or burner can burn\\\"\\n        );\\n        _burn(_tokenId);\\n    }\\n\\n    /**\\n        tokenContentURI Function\\n        @notice gets the URI of the content of a token. subject to change pending EIP draft\\n        @param _tokenId uint256 identifier of token to get content URI for\\n        @return string content URI for given tokenId\\n        @dev basic public getter method for content URI\\n     */\\n    function tokenContentURI(uint256 _tokenId) public view returns (string memory) {\\n        return tokenData[_tokenId].contentURI;\\n    }\\n\\n    /**\\n        creator Function\\n        @notice gets the creator of a token\\n        @param _tokenId uint256 identifier of token to get creator for\\n        @return address creator of given tokenId\\n        @dev idk what this should be called, and do we need?\\n     */\\n    function creator(uint256 _tokenId) public view returns (address) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        return tokenData[_tokenId].creator;\\n    }\\n\\n    /**\\n        royaltyPayoutAddress Function\\n        @notice gets the address of the royalty payout for a token\\n        @param _tokenId uint256 identifier of token to get royalty payout address for\\n        @return address royalty payout address of given tokenId\\n        @dev not part of EIP2981, but useful \\n     */\\n    function royaltyPayoutAddress(uint256 _tokenId) public view returns (address) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        return tokenData[_tokenId].royaltyPayout;\\n    }\\n\\n    /**\\n        mint Function\\n        @notice mints a new token\\n        @param _data TokenData struct, see ITB303\\n        @param _proof bytes32[] merkle proof of artist wallet. \\n                                this is created off-chain.  e.g (proof = tree.getHexProof(keccak256(address)))\\n        @return uint256 tokenId of minted token (useful since we are not using Enumerable)\\n        @dev mints a new token to allowlisted msg.sender with a valid merkle proof. params can and should\\n             be changed to calldata for gas efficiency. rename to \\\"allowlist\\\"\\n\\n     */\\n    function mint(TokenData calldata _data, bytes32[] calldata _proof) external returns (uint256) {\\n        /// call angela\\n        require(verify(leaf(_data.creator), _proof), \\\"!valid proof\\\");\\n\\n        require(_data.royaltyBPS < 10000, \\\"royalty !< 10000\\\");\\n\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _mint(msg.sender, tokenId);\\n\\n        tokenData[tokenId] = TokenData({\\n            metadataURI: _data.metadataURI,\\n            contentURI: _data.contentURI,\\n            creator: _data.creator,\\n            royaltyPayout: _data.royaltyPayout,\\n            royaltyBPS: _data.royaltyBPS\\n        });\\n\\n        /// increase tokenid\\n        _tokenIdCounter.increment();\\n\\n        return tokenId;\\n    }\\n\\n    /**\\n        updateContentURI Function\\n        @notice updates the content URI of a token, emits an event\\n        @param _tokenId uint256 token id corresponding to the token to update\\n        @param _contentURI string containing new/updated media content (subject to change, new EIP)\\n        @dev access controlled function, restricted to owner/admim. subject to change.\\n     */\\n    function updateContentURI(uint256 _tokenId, string memory _contentURI) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        emit ContentUpdated(_tokenId, _contentURI);\\n        tokenData[_tokenId].contentURI = _contentURI;\\n    }\\n\\n    /**\\n        updateRoot Function\\n        @notice updates the merkleroot of the allowlist\\n        @param _newRoot bytes32 containing the new root hash, generated off-chain\\n        @dev access controlled function, restricted to owner/admim.\\n        @notice this function is inherits from Angela.sol, and may not be necessary depending\\n                on role based configuration.\\n     */\\n    function updateRoot(bytes32 _newRoot) external onlyRole(TREE_ROLE) {\\n        updateMerkleRoot(_newRoot);\\n    }\\n\\n    /**\\n        updateMetadataURI Function\\n        @notice updates the metadata URI of a token, emits an event\\n        @param _tokenId uint256 token id corresponding to the token to update\\n        @param _metadataURI string containing new/updated metadata (e.g IPFS URI pointing to metadata.json)\\n        @dev access controlled, restricted to contract owner \\n             when they own the tokenId or the creator (when they own the token)\\n     */\\n    function updateMetadataURI(uint256 _tokenId, string memory _metadataURI) external tokenExists(_tokenId) {\\n        require(\\n            msg.sender == tokenData[_tokenId].creator || hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"Only creator or admin\\\"\\n        );\\n        // event\\n        emit MetadataUpdated(_tokenId, _metadataURI);\\n\\n        tokenData[_tokenId].metadataURI = _metadataURI;\\n    }\\n\\n    /**\\n        updateRoyaltyInfo Function\\n        @notice updates the royalty payout address and royalty BPS of a token, emits an event\\n        @param _tokenId uint256 token id corresponding to the token of which to update royalty payout\\n        @param _royaltyPayoutAddress address of new royalty payout address\\n        @dev access controlled to owner only, subject to change. \\n             this function allows for emergency royalty control (i.e compromised wallet)\\n     */\\n    function updateRoyaltyInfo(uint256 _tokenId, address _royaltyPayoutAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        emit RoyaltyUpdated(_tokenId, _royaltyPayoutAddress);\\n        tokenData[_tokenId].royaltyPayout = _royaltyPayoutAddress;\\n    }\\n\\n    /**\\n        tokenURI Function\\n        @notice override function to get the URI of a token. returns stored metadataURI\\n        @param _tokenId uint256 token id corresponding to the token of which to get metadata from\\n        @return string containing metadata URI\\n        @dev override function, returns metadataURI of token stored in tokenData\\n     */\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        return tokenData[_tokenId].metadataURI;\\n    }\\n\\n    /**\\n        royaltyInfo Function\\n        @notice override function gets royalty information for a token (EIP-2981)\\n        @param _tokenId uint256 token id corresponding to the token of which to get royalty information\\n        @param _salePrice uint256 final sale price of token used to calculate royalty payout\\n        @dev override, conforms to EIP-2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        return (tokenData[_tokenId].royaltyPayout, (_salePrice * tokenData[_tokenId].royaltyBPS) / 10_000);\\n    }\\n\\n    /**\\n        supportsInterface Function\\n        @notice override function to check if contract supports an interface\\n        @param interfaceId bytes4 id of interface to check\\n        @dev override \\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Upgradeable, IERC165Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId) ||\\n            AccessControlUpgradeable.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x83ef914aec58141b175f295aaabfc916d4f29c1011f08a7f168b4035fb6bc66a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b620012ab1760201c565b15905090565b3b151590565b6127be80620001126000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80634cd88b761161011a57806395d89b41116100ad578063c87b56dd1161007c578063c87b56dd1461048a578063d547741f1461049d578063e985e9c5146104b0578063f8840df6146104ec578063fbd8d283146104ff57600080fd5b806395d89b4114610454578063a217fddf1461045c578063a22cb46514610464578063b88d4fde1461047757600080fd5b8063669d311c116100e9578063669d311c1461040857806370a082311461041b5780638fe86b3f1461042e57806391d148541461044157600080fd5b80634cd88b76146103bc578063510b5158146103cf578063514eaa25146103e25780636352211e146103f557600080fd5b8063248a9ca3116101925780632f2ff15d116101615780632f2ff15d1461037057806336568abe1461038357806342842e0e1461039657806342966c68146103a957600080fd5b8063248a9ca3146102eb578063282c51f31461030e5780632a55205a146103355780632eb4a7ab1461036757600080fd5b80630c0a9d26116101ce5780630c0a9d261461027d5780631b3c636c1461029057806321ff9970146102c557806323b872dd146102d857600080fd5b806301ffc9a71461020057806306fdde0314610228578063081812fc1461023d578063095ea7b314610268575b600080fd5b61021361020e366004611fab565b610512565b60405190151581526020015b60405180910390f35b61023061054c565b60405161021f9190612020565b61025061024b366004612033565b6105de565b6040516001600160a01b03909116815260200161021f565b61027b610276366004612068565b61066b565b005b61023061028b366004612033565b610781565b6102b77f1fdbf99a5af5a7f7ecbac27beb0e0f146da7c2c648249ff6cc033515d665548881565b60405190815260200161021f565b61027b6102d3366004612033565b610826565b61027b6102e6366004612092565b61085e565b6102b76102f9366004612033565b60009081526097602052604090206001015490565b6102b77f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b6103486103433660046120ce565b61088f565b604080516001600160a01b03909316835260208301919091520161021f565b6102b760c95481565b61027b61037e3660046120f0565b6108dd565b61027b6103913660046120f0565b610903565b61027b6103a4366004612092565b61097d565b61027b6103b7366004612033565b610998565b61027b6103ca3660046121c8565b610a3d565b6102506103dd366004612033565b610b76565b6102b76103f036600461222c565b610bbc565b610250610403366004612033565b610e91565b61027b6104163660046120f0565b610f08565b6102b76104293660046122ce565b610f7c565b61027b61043c3660046122e9565b611003565b61021361044f3660046120f0565b61111f565b61023061114a565b6102b7600081565b61027b610472366004612326565b611159565b61027b610485366004612362565b611164565b610230610498366004612033565b611196565b61027b6104ab3660046120f0565b6111d6565b6102136104be3660046123de565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b61027b6104fa3660046122e9565b6111fc565b61025061050d366004612033565b611265565b600063152a902d60e11b6001600160e01b0319831614806105375750610537826112b1565b80610546575061054682611301565b92915050565b60606065805461055b90612408565b80601f016020809104026020016040519081016040528092919081815260200182805461058790612408565b80156105d45780601f106105a9576101008083540402835291602001916105d4565b820191906000526020600020905b8154815290600101906020018083116105b757829003601f168201915b5050505050905090565b60006105e982611326565b61064f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b600061067682610e91565b9050806001600160a01b0316836001600160a01b031614156106e45760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610646565b336001600160a01b0382161480610700575061070081336104be565b6107725760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610646565b61077c8383611343565b505050565b600081815260ca602052604090206001018054606091906107a190612408565b80601f01602080910402602001604051908101604052809291908181526020018280546107cd90612408565b801561081a5780601f106107ef5761010080835404028352916020019161081a565b820191906000526020600020905b8154815290600101906020018083116107fd57829003601f168201915b50505050509050919050565b7f1fdbf99a5af5a7f7ecbac27beb0e0f146da7c2c648249ff6cc033515d665548861085181336113b1565b61085a82611415565b5050565b6108683382611450565b6108845760405162461bcd60e51b815260040161064690612443565b61077c838383611536565b600082815260ca602052604081206003015481906001600160a01b03811690612710906108c790600160a01b900461ffff16866124aa565b6108d191906124c9565b915091505b9250929050565b6000828152609760205260409020600101546108f981336113b1565b61077c83836116d6565b6001600160a01b03811633146109735760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610646565b61085a828261175c565b61077c83838360405180602001604052806000815250611164565b600081815260ca60205260409020600201546001600160a01b03163314806109e557506109e57f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8483361111f565b610a315760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c792063726561746f72206f72206275726e65722063616e206275726e006044820152606401610646565b610a3a816117c3565b50565b600054610100900460ff16610a585760005460ff1615610a5c565b303b155b610abf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610646565b600054610100900460ff16158015610ae1576000805461ffff19166101011790555b610aeb838361185e565b610af361189f565b610afe6000336116d6565b610b287f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848336116d6565b610b527f1fdbf99a5af5a7f7ecbac27beb0e0f146da7c2c648249ff6cc033515d6655488336116d6565b610b6060cb80546001019055565b801561077c576000805461ff0019169055505050565b6000610b8182611326565b610b9d5760405162461bcd60e51b8152600401610646906124eb565b50600090815260ca60205260409020600201546001600160a01b031690565b6000610c4c610c13610bd460608701604088016122ce565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506118e092505050565b610c875760405162461bcd60e51b815260206004820152600c60248201526b10bb30b634b210383937b7b360a11b6044820152606401610646565b612710610c9a60a086016080870161253a565b61ffff1610610cde5760405162461bcd60e51b815260206004820152601060248201526f0726f79616c747920213c2031303030360841b6044820152606401610646565b6000610ce960cb5490565b9050610cf533826118f6565b6040805160a0810190915280610d0b878061255e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602090810190610d549088018861255e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001610d9e60608801604089016122ce565b6001600160a01b03168152602001610dbc60808801606089016122ce565b6001600160a01b03168152602001610dda60a088016080890161253a565b61ffff169052600082815260ca60209081526040909120825180519192610e0692849290910190611efc565b506020828101518051610e1f9260018501920190611efc565b5060408201516002820180546001600160a01b039283166001600160a01b031990911617905560608301516003909201805460809094015161ffff16600160a01b026001600160b01b03199094169290911691909117919091179055610e8960cb80546001019055565b949350505050565b6000818152606760205260408120546001600160a01b0316806105465760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610646565b6000610f1481336113b1565b6040516001600160a01b0383169084907f13ceafb5e8ec39102bd452913a5c00a05f3b060d636d3a567c1c80e8b4321fe790600090a350600091825260ca602052604090912060030180546001600160a01b0319166001600160a01b03909216919091179055565b60006001600160a01b038216610fe75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610646565b506001600160a01b031660009081526068602052604090205490565b8161100d81611326565b6110505760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610646565b600083815260ca60205260409020600201546001600160a01b031633148061107e575061107e60003361111f565b6110c25760405162461bcd60e51b815260206004820152601560248201527427b7363c9031b932b0ba37b91037b91030b236b4b760591b6044820152606401610646565b827f459157ba24c7ab9878b165ef465fa6ae2ab42bcd8445f576be378768b0c47309836040516110f29190612020565b60405180910390a2600083815260ca60209081526040909120835161111992850190611efc565b50505050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606066805461055b90612408565b61085a338383611a29565b61116e3383611450565b61118a5760405162461bcd60e51b815260040161064690612443565b61111984848484611af8565b60606111a182611326565b6111bd5760405162461bcd60e51b8152600401610646906124eb565b600082815260ca6020526040902080546107a190612408565b6000828152609760205260409020600101546111f281336113b1565b61077c838361175c565b600061120881336113b1565b827f4071afae07e623612645169abd4d62a6bd5932a996b14deac10d9903faccea54836040516112389190612020565b60405180910390a2600083815260ca60209081526040909120835161111992600190920191850190611efc565b600061127082611326565b61128c5760405162461bcd60e51b8152600401610646906124eb565b50600090815260ca60205260409020600301546001600160a01b031690565b3b151590565b60006001600160e01b031982166380ac58cd60e01b14806112e257506001600160e01b03198216635b5e139f60e01b145b8061054657506301ffc9a760e01b6001600160e01b0319831614610546565b60006001600160e01b03198216637965db0b60e01b14806105465750610546826112b1565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061137882610e91565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6113bb828261111f565b61085a576113d3816001600160a01b03166014611b2b565b6113de836020611b2b565b6040516020016113ef9291906125a5565b60408051601f198184030181529082905262461bcd60e51b825261064691600401612020565b60c98190556040518181527fa2bc4a36b1e221bdcc16df9d7c15559a5f4f9902519c0f92ad3198f1df005e8b9060200160405180910390a150565b600061145b82611326565b6114bc5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610646565b60006114c783610e91565b9050806001600160a01b0316846001600160a01b031614806115025750836001600160a01b03166114f7846105de565b6001600160a01b0316145b80610e8957506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff16610e89565b826001600160a01b031661154982610e91565b6001600160a01b0316146115b15760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610646565b6001600160a01b0382166116135760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610646565b61161e600082611343565b6001600160a01b038316600090815260686020526040812080546001929061164790849061261a565b90915550506001600160a01b0382166000908152606860205260408120805460019290611675908490612631565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6116e0828261111f565b61085a5760008281526097602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117183390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611766828261111f565b1561085a5760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006117ce82610e91565b90506117db600083611343565b6001600160a01b038116600090815260686020526040812080546001929061180490849061261a565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff166118855760405162461bcd60e51b815260040161064690612649565b61188d611cc7565b611895611cc7565b61085a8282611cee565b600054610100900460ff166118c65760405162461bcd60e51b815260040161064690612649565b6118ce611cc7565b6118d6611cc7565b6118de611cc7565b565b60006118ef8260c95485611d3c565b9392505050565b6001600160a01b03821661194c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610646565b61195581611326565b156119a25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610646565b6001600160a01b03821660009081526068602052604081208054600192906119cb908490612631565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b816001600160a01b0316836001600160a01b03161415611a8b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610646565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611b03848484611536565b611b0f84848484611d52565b6111195760405162461bcd60e51b815260040161064690612694565b60606000611b3a8360026124aa565b611b45906002612631565b67ffffffffffffffff811115611b5d57611b5d61211c565b6040519080825280601f01601f191660200182016040528015611b87576020820181803683370190505b509050600360fc1b81600081518110611ba257611ba26126e6565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611bd157611bd16126e6565b60200101906001600160f81b031916908160001a9053506000611bf58460026124aa565b611c00906001612631565b90505b6001811115611c78576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611c3457611c346126e6565b1a60f81b828281518110611c4a57611c4a6126e6565b60200101906001600160f81b031916908160001a90535060049490941c93611c71816126fc565b9050611c03565b5083156118ef5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610646565b600054610100900460ff166118de5760405162461bcd60e51b815260040161064690612649565b600054610100900460ff16611d155760405162461bcd60e51b815260040161064690612649565b8151611d28906065906020850190611efc565b50805161077c906066906020840190611efc565b600082611d498584611e50565b14949350505050565b60006001600160a01b0384163b15611e4557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611d96903390899088908890600401612713565b6020604051808303816000875af1925050508015611dd1575060408051601f3d908101601f19168201909252611dce91810190612750565b60015b611e2b573d808015611dff576040519150601f19603f3d011682016040523d82523d6000602084013e611e04565b606091505b508051611e235760405162461bcd60e51b815260040161064690612694565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610e89565b506001949350505050565b600081815b8451811015611ef4576000858281518110611e7257611e726126e6565b60200260200101519050808311611eb4576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611ee1565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b5080611eec8161276d565b915050611e55565b509392505050565b828054611f0890612408565b90600052602060002090601f016020900481019282611f2a5760008555611f70565b82601f10611f4357805160ff1916838001178555611f70565b82800160010185558215611f70579182015b82811115611f70578251825591602001919060010190611f55565b50611f7c929150611f80565b5090565b5b80821115611f7c5760008155600101611f81565b6001600160e01b031981168114610a3a57600080fd5b600060208284031215611fbd57600080fd5b81356118ef81611f95565b60005b83811015611fe3578181015183820152602001611fcb565b838111156111195750506000910152565b6000815180845261200c816020860160208601611fc8565b601f01601f19169290920160200192915050565b6020815260006118ef6020830184611ff4565b60006020828403121561204557600080fd5b5035919050565b80356001600160a01b038116811461206357600080fd5b919050565b6000806040838503121561207b57600080fd5b6120848361204c565b946020939093013593505050565b6000806000606084860312156120a757600080fd5b6120b08461204c565b92506120be6020850161204c565b9150604084013590509250925092565b600080604083850312156120e157600080fd5b50508035926020909101359150565b6000806040838503121561210357600080fd5b823591506121136020840161204c565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561214d5761214d61211c565b604051601f8501601f19908116603f011681019082821181831017156121755761217561211c565b8160405280935085815286868601111561218e57600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126121b957600080fd5b6118ef83833560208501612132565b600080604083850312156121db57600080fd5b823567ffffffffffffffff808211156121f357600080fd5b6121ff868387016121a8565b9350602085013591508082111561221557600080fd5b50612222858286016121a8565b9150509250929050565b60008060006040848603121561224157600080fd5b833567ffffffffffffffff8082111561225957600080fd5b9085019060a0828803121561226d57600080fd5b9093506020850135908082111561228357600080fd5b818601915086601f83011261229757600080fd5b8135818111156122a657600080fd5b8760208260051b85010111156122bb57600080fd5b6020830194508093505050509250925092565b6000602082840312156122e057600080fd5b6118ef8261204c565b600080604083850312156122fc57600080fd5b82359150602083013567ffffffffffffffff81111561231a57600080fd5b612222858286016121a8565b6000806040838503121561233957600080fd5b6123428361204c565b91506020830135801515811461235757600080fd5b809150509250929050565b6000806000806080858703121561237857600080fd5b6123818561204c565b935061238f6020860161204c565b925060408501359150606085013567ffffffffffffffff8111156123b257600080fd5b8501601f810187136123c357600080fd5b6123d287823560208401612132565b91505092959194509250565b600080604083850312156123f157600080fd5b6123fa8361204c565b91506121136020840161204c565b600181811c9082168061241c57607f821691505b6020821081141561243d57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156124c4576124c4612494565b500290565b6000826124e657634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60006020828403121561254c57600080fd5b813561ffff811681146118ef57600080fd5b6000808335601e1984360301811261257557600080fd5b83018035915067ffffffffffffffff82111561259057600080fd5b6020019150368190038213156108d657600080fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516125dd816017850160208801611fc8565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161260e816028840160208801611fc8565b01602801949350505050565b60008282101561262c5761262c612494565b500390565b6000821982111561264457612644612494565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008161270b5761270b612494565b506000190190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061274690830184611ff4565b9695505050505050565b60006020828403121561276257600080fd5b81516118ef81611f95565b600060001982141561278157612781612494565b506001019056fea264697066735822122019485721450acd6abedde94ef8499c3968864954ea1e817ceb631e5cf7c29fee64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c80634cd88b761161011a57806395d89b41116100ad578063c87b56dd1161007c578063c87b56dd1461048a578063d547741f1461049d578063e985e9c5146104b0578063f8840df6146104ec578063fbd8d283146104ff57600080fd5b806395d89b4114610454578063a217fddf1461045c578063a22cb46514610464578063b88d4fde1461047757600080fd5b8063669d311c116100e9578063669d311c1461040857806370a082311461041b5780638fe86b3f1461042e57806391d148541461044157600080fd5b80634cd88b76146103bc578063510b5158146103cf578063514eaa25146103e25780636352211e146103f557600080fd5b8063248a9ca3116101925780632f2ff15d116101615780632f2ff15d1461037057806336568abe1461038357806342842e0e1461039657806342966c68146103a957600080fd5b8063248a9ca3146102eb578063282c51f31461030e5780632a55205a146103355780632eb4a7ab1461036757600080fd5b80630c0a9d26116101ce5780630c0a9d261461027d5780631b3c636c1461029057806321ff9970146102c557806323b872dd146102d857600080fd5b806301ffc9a71461020057806306fdde0314610228578063081812fc1461023d578063095ea7b314610268575b600080fd5b61021361020e366004611fab565b610512565b60405190151581526020015b60405180910390f35b61023061054c565b60405161021f9190612020565b61025061024b366004612033565b6105de565b6040516001600160a01b03909116815260200161021f565b61027b610276366004612068565b61066b565b005b61023061028b366004612033565b610781565b6102b77f1fdbf99a5af5a7f7ecbac27beb0e0f146da7c2c648249ff6cc033515d665548881565b60405190815260200161021f565b61027b6102d3366004612033565b610826565b61027b6102e6366004612092565b61085e565b6102b76102f9366004612033565b60009081526097602052604090206001015490565b6102b77f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b6103486103433660046120ce565b61088f565b604080516001600160a01b03909316835260208301919091520161021f565b6102b760c95481565b61027b61037e3660046120f0565b6108dd565b61027b6103913660046120f0565b610903565b61027b6103a4366004612092565b61097d565b61027b6103b7366004612033565b610998565b61027b6103ca3660046121c8565b610a3d565b6102506103dd366004612033565b610b76565b6102b76103f036600461222c565b610bbc565b610250610403366004612033565b610e91565b61027b6104163660046120f0565b610f08565b6102b76104293660046122ce565b610f7c565b61027b61043c3660046122e9565b611003565b61021361044f3660046120f0565b61111f565b61023061114a565b6102b7600081565b61027b610472366004612326565b611159565b61027b610485366004612362565b611164565b610230610498366004612033565b611196565b61027b6104ab3660046120f0565b6111d6565b6102136104be3660046123de565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b61027b6104fa3660046122e9565b6111fc565b61025061050d366004612033565b611265565b600063152a902d60e11b6001600160e01b0319831614806105375750610537826112b1565b80610546575061054682611301565b92915050565b60606065805461055b90612408565b80601f016020809104026020016040519081016040528092919081815260200182805461058790612408565b80156105d45780601f106105a9576101008083540402835291602001916105d4565b820191906000526020600020905b8154815290600101906020018083116105b757829003601f168201915b5050505050905090565b60006105e982611326565b61064f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b600061067682610e91565b9050806001600160a01b0316836001600160a01b031614156106e45760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610646565b336001600160a01b0382161480610700575061070081336104be565b6107725760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610646565b61077c8383611343565b505050565b600081815260ca602052604090206001018054606091906107a190612408565b80601f01602080910402602001604051908101604052809291908181526020018280546107cd90612408565b801561081a5780601f106107ef5761010080835404028352916020019161081a565b820191906000526020600020905b8154815290600101906020018083116107fd57829003601f168201915b50505050509050919050565b7f1fdbf99a5af5a7f7ecbac27beb0e0f146da7c2c648249ff6cc033515d665548861085181336113b1565b61085a82611415565b5050565b6108683382611450565b6108845760405162461bcd60e51b815260040161064690612443565b61077c838383611536565b600082815260ca602052604081206003015481906001600160a01b03811690612710906108c790600160a01b900461ffff16866124aa565b6108d191906124c9565b915091505b9250929050565b6000828152609760205260409020600101546108f981336113b1565b61077c83836116d6565b6001600160a01b03811633146109735760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610646565b61085a828261175c565b61077c83838360405180602001604052806000815250611164565b600081815260ca60205260409020600201546001600160a01b03163314806109e557506109e57f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8483361111f565b610a315760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c792063726561746f72206f72206275726e65722063616e206275726e006044820152606401610646565b610a3a816117c3565b50565b600054610100900460ff16610a585760005460ff1615610a5c565b303b155b610abf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610646565b600054610100900460ff16158015610ae1576000805461ffff19166101011790555b610aeb838361185e565b610af361189f565b610afe6000336116d6565b610b287f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848336116d6565b610b527f1fdbf99a5af5a7f7ecbac27beb0e0f146da7c2c648249ff6cc033515d6655488336116d6565b610b6060cb80546001019055565b801561077c576000805461ff0019169055505050565b6000610b8182611326565b610b9d5760405162461bcd60e51b8152600401610646906124eb565b50600090815260ca60205260409020600201546001600160a01b031690565b6000610c4c610c13610bd460608701604088016122ce565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506118e092505050565b610c875760405162461bcd60e51b815260206004820152600c60248201526b10bb30b634b210383937b7b360a11b6044820152606401610646565b612710610c9a60a086016080870161253a565b61ffff1610610cde5760405162461bcd60e51b815260206004820152601060248201526f0726f79616c747920213c2031303030360841b6044820152606401610646565b6000610ce960cb5490565b9050610cf533826118f6565b6040805160a0810190915280610d0b878061255e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602090810190610d549088018861255e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001610d9e60608801604089016122ce565b6001600160a01b03168152602001610dbc60808801606089016122ce565b6001600160a01b03168152602001610dda60a088016080890161253a565b61ffff169052600082815260ca60209081526040909120825180519192610e0692849290910190611efc565b506020828101518051610e1f9260018501920190611efc565b5060408201516002820180546001600160a01b039283166001600160a01b031990911617905560608301516003909201805460809094015161ffff16600160a01b026001600160b01b03199094169290911691909117919091179055610e8960cb80546001019055565b949350505050565b6000818152606760205260408120546001600160a01b0316806105465760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610646565b6000610f1481336113b1565b6040516001600160a01b0383169084907f13ceafb5e8ec39102bd452913a5c00a05f3b060d636d3a567c1c80e8b4321fe790600090a350600091825260ca602052604090912060030180546001600160a01b0319166001600160a01b03909216919091179055565b60006001600160a01b038216610fe75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610646565b506001600160a01b031660009081526068602052604090205490565b8161100d81611326565b6110505760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610646565b600083815260ca60205260409020600201546001600160a01b031633148061107e575061107e60003361111f565b6110c25760405162461bcd60e51b815260206004820152601560248201527427b7363c9031b932b0ba37b91037b91030b236b4b760591b6044820152606401610646565b827f459157ba24c7ab9878b165ef465fa6ae2ab42bcd8445f576be378768b0c47309836040516110f29190612020565b60405180910390a2600083815260ca60209081526040909120835161111992850190611efc565b50505050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606066805461055b90612408565b61085a338383611a29565b61116e3383611450565b61118a5760405162461bcd60e51b815260040161064690612443565b61111984848484611af8565b60606111a182611326565b6111bd5760405162461bcd60e51b8152600401610646906124eb565b600082815260ca6020526040902080546107a190612408565b6000828152609760205260409020600101546111f281336113b1565b61077c838361175c565b600061120881336113b1565b827f4071afae07e623612645169abd4d62a6bd5932a996b14deac10d9903faccea54836040516112389190612020565b60405180910390a2600083815260ca60209081526040909120835161111992600190920191850190611efc565b600061127082611326565b61128c5760405162461bcd60e51b8152600401610646906124eb565b50600090815260ca60205260409020600301546001600160a01b031690565b3b151590565b60006001600160e01b031982166380ac58cd60e01b14806112e257506001600160e01b03198216635b5e139f60e01b145b8061054657506301ffc9a760e01b6001600160e01b0319831614610546565b60006001600160e01b03198216637965db0b60e01b14806105465750610546826112b1565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061137882610e91565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6113bb828261111f565b61085a576113d3816001600160a01b03166014611b2b565b6113de836020611b2b565b6040516020016113ef9291906125a5565b60408051601f198184030181529082905262461bcd60e51b825261064691600401612020565b60c98190556040518181527fa2bc4a36b1e221bdcc16df9d7c15559a5f4f9902519c0f92ad3198f1df005e8b9060200160405180910390a150565b600061145b82611326565b6114bc5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610646565b60006114c783610e91565b9050806001600160a01b0316846001600160a01b031614806115025750836001600160a01b03166114f7846105de565b6001600160a01b0316145b80610e8957506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff16610e89565b826001600160a01b031661154982610e91565b6001600160a01b0316146115b15760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610646565b6001600160a01b0382166116135760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610646565b61161e600082611343565b6001600160a01b038316600090815260686020526040812080546001929061164790849061261a565b90915550506001600160a01b0382166000908152606860205260408120805460019290611675908490612631565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6116e0828261111f565b61085a5760008281526097602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117183390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611766828261111f565b1561085a5760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006117ce82610e91565b90506117db600083611343565b6001600160a01b038116600090815260686020526040812080546001929061180490849061261a565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff166118855760405162461bcd60e51b815260040161064690612649565b61188d611cc7565b611895611cc7565b61085a8282611cee565b600054610100900460ff166118c65760405162461bcd60e51b815260040161064690612649565b6118ce611cc7565b6118d6611cc7565b6118de611cc7565b565b60006118ef8260c95485611d3c565b9392505050565b6001600160a01b03821661194c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610646565b61195581611326565b156119a25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610646565b6001600160a01b03821660009081526068602052604081208054600192906119cb908490612631565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b816001600160a01b0316836001600160a01b03161415611a8b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610646565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611b03848484611536565b611b0f84848484611d52565b6111195760405162461bcd60e51b815260040161064690612694565b60606000611b3a8360026124aa565b611b45906002612631565b67ffffffffffffffff811115611b5d57611b5d61211c565b6040519080825280601f01601f191660200182016040528015611b87576020820181803683370190505b509050600360fc1b81600081518110611ba257611ba26126e6565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611bd157611bd16126e6565b60200101906001600160f81b031916908160001a9053506000611bf58460026124aa565b611c00906001612631565b90505b6001811115611c78576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611c3457611c346126e6565b1a60f81b828281518110611c4a57611c4a6126e6565b60200101906001600160f81b031916908160001a90535060049490941c93611c71816126fc565b9050611c03565b5083156118ef5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610646565b600054610100900460ff166118de5760405162461bcd60e51b815260040161064690612649565b600054610100900460ff16611d155760405162461bcd60e51b815260040161064690612649565b8151611d28906065906020850190611efc565b50805161077c906066906020840190611efc565b600082611d498584611e50565b14949350505050565b60006001600160a01b0384163b15611e4557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611d96903390899088908890600401612713565b6020604051808303816000875af1925050508015611dd1575060408051601f3d908101601f19168201909252611dce91810190612750565b60015b611e2b573d808015611dff576040519150601f19603f3d011682016040523d82523d6000602084013e611e04565b606091505b508051611e235760405162461bcd60e51b815260040161064690612694565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610e89565b506001949350505050565b600081815b8451811015611ef4576000858281518110611e7257611e726126e6565b60200260200101519050808311611eb4576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611ee1565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b5080611eec8161276d565b915050611e55565b509392505050565b828054611f0890612408565b90600052602060002090601f016020900481019282611f2a5760008555611f70565b82601f10611f4357805160ff1916838001178555611f70565b82800160010185558215611f70579182015b82811115611f70578251825591602001919060010190611f55565b50611f7c929150611f80565b5090565b5b80821115611f7c5760008155600101611f81565b6001600160e01b031981168114610a3a57600080fd5b600060208284031215611fbd57600080fd5b81356118ef81611f95565b60005b83811015611fe3578181015183820152602001611fcb565b838111156111195750506000910152565b6000815180845261200c816020860160208601611fc8565b601f01601f19169290920160200192915050565b6020815260006118ef6020830184611ff4565b60006020828403121561204557600080fd5b5035919050565b80356001600160a01b038116811461206357600080fd5b919050565b6000806040838503121561207b57600080fd5b6120848361204c565b946020939093013593505050565b6000806000606084860312156120a757600080fd5b6120b08461204c565b92506120be6020850161204c565b9150604084013590509250925092565b600080604083850312156120e157600080fd5b50508035926020909101359150565b6000806040838503121561210357600080fd5b823591506121136020840161204c565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561214d5761214d61211c565b604051601f8501601f19908116603f011681019082821181831017156121755761217561211c565b8160405280935085815286868601111561218e57600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126121b957600080fd5b6118ef83833560208501612132565b600080604083850312156121db57600080fd5b823567ffffffffffffffff808211156121f357600080fd5b6121ff868387016121a8565b9350602085013591508082111561221557600080fd5b50612222858286016121a8565b9150509250929050565b60008060006040848603121561224157600080fd5b833567ffffffffffffffff8082111561225957600080fd5b9085019060a0828803121561226d57600080fd5b9093506020850135908082111561228357600080fd5b818601915086601f83011261229757600080fd5b8135818111156122a657600080fd5b8760208260051b85010111156122bb57600080fd5b6020830194508093505050509250925092565b6000602082840312156122e057600080fd5b6118ef8261204c565b600080604083850312156122fc57600080fd5b82359150602083013567ffffffffffffffff81111561231a57600080fd5b612222858286016121a8565b6000806040838503121561233957600080fd5b6123428361204c565b91506020830135801515811461235757600080fd5b809150509250929050565b6000806000806080858703121561237857600080fd5b6123818561204c565b935061238f6020860161204c565b925060408501359150606085013567ffffffffffffffff8111156123b257600080fd5b8501601f810187136123c357600080fd5b6123d287823560208401612132565b91505092959194509250565b600080604083850312156123f157600080fd5b6123fa8361204c565b91506121136020840161204c565b600181811c9082168061241c57607f821691505b6020821081141561243d57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156124c4576124c4612494565b500290565b6000826124e657634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60006020828403121561254c57600080fd5b813561ffff811681146118ef57600080fd5b6000808335601e1984360301811261257557600080fd5b83018035915067ffffffffffffffff82111561259057600080fd5b6020019150368190038213156108d657600080fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516125dd816017850160208801611fc8565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161260e816028840160208801611fc8565b01602801949350505050565b60008282101561262c5761262c612494565b500390565b6000821982111561264457612644612494565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008161270b5761270b612494565b506000190190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061274690830184611ff4565b9695505050505050565b60006020828403121561276257600080fd5b81516118ef81611f95565b600060001982141561278157612781612494565b506001019056fea264697066735822122019485721450acd6abedde94ef8499c3968864954ea1e817ceb631e5cf7c29fee64736f6c634300080a0033",
  "devdoc": {
    "author": ":   @bretth18 (computerdata) of @catalogworks",
    "details": ":   Upgradeable ERC721 Contract. This version is for testing an alternative burn method and features role based permissions.  Purpose built for optmization over the Zora V1 contracts. isian (iain nash) of Zora.  ---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           ",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "requires sender to be creator or have BURNER_ROLE",
        "params": {
          "_tokenId": "uint256 identifier of token to burn"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "creator(uint256)": {
        "details": "idk what this should be called, and do we need?",
        "params": {
          "_tokenId": "uint256 identifier of token to get creator for"
        },
        "returns": {
          "_0": "address creator of given tokenId"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(string,string)": {
        "details": "Initializes contract with default values, acts as a constructor. Necessary for OZ proxy",
        "params": {
          "_name": "string name of the contract",
          "_symbol": "string symbol of the contract"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint((string,string,address,address,uint16),bytes32[])": {
        "details": "mints a new token to allowlisted msg.sender with a valid merkle proof. params can and should be changed to calldata for gas efficiency. rename to \"allowlist\"",
        "params": {
          "_data": "TokenData struct, see ITB303",
          "_proof": "bytes32[] merkle proof of artist wallet.  this is created off-chain.  e.g (proof = tree.getHexProof(keccak256(address)))"
        },
        "returns": {
          "_0": "uint256 tokenId of minted token (useful since we are not using Enumerable)"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "override, conforms to EIP-2981",
        "params": {
          "_salePrice": "uint256 final sale price of token used to calculate royalty payout",
          "_tokenId": "uint256 token id corresponding to the token of which to get royalty information"
        }
      },
      "royaltyPayoutAddress(uint256)": {
        "details": "not part of EIP2981, but useful ",
        "params": {
          "_tokenId": "uint256 identifier of token to get royalty payout address for"
        },
        "returns": {
          "_0": "address royalty payout address of given tokenId"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "override ",
        "params": {
          "interfaceId": "bytes4 id of interface to check"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenContentURI(uint256)": {
        "details": "basic public getter method for content URI",
        "params": {
          "_tokenId": "uint256 identifier of token to get content URI for"
        },
        "returns": {
          "_0": "string content URI for given tokenId"
        }
      },
      "tokenURI(uint256)": {
        "details": "override function, returns metadataURI of token stored in tokenData",
        "params": {
          "_tokenId": "uint256 token id corresponding to the token of which to get metadata from"
        },
        "returns": {
          "_0": "string containing metadata URI"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "updateContentURI(uint256,string)": {
        "details": "access controlled function, restricted to owner/admim. subject to change.",
        "params": {
          "_contentURI": "string containing new/updated media content (subject to change, new EIP)",
          "_tokenId": "uint256 token id corresponding to the token to update"
        }
      },
      "updateMetadataURI(uint256,string)": {
        "details": "access controlled, restricted to contract owner  when they own the tokenId or the creator (when they own the token)",
        "params": {
          "_metadataURI": "string containing new/updated metadata (e.g IPFS URI pointing to metadata.json)",
          "_tokenId": "uint256 token id corresponding to the token to update"
        }
      },
      "updateRoot(bytes32)": {
        "details": "access controlled function, restricted to owner/admim.",
        "params": {
          "_newRoot": "bytes32 containing the new root hash, generated off-chain"
        }
      },
      "updateRoyaltyInfo(uint256,address)": {
        "details": "access controlled to owner only, subject to change.  this function allows for emergency royalty control (i.e compromised wallet)",
        "params": {
          "_royaltyPayoutAddress": "address of new royalty payout address",
          "_tokenId": "uint256 token id corresponding to the token of which to update royalty payout"
        }
      }
    },
    "title": ":   SP1200",
    "version": 1
  },
  "userdoc": {
    "events": {
      "MetadataUpdated(uint256,string)": {
        "notice": "Events"
      },
      "merkleRootUpdated(bytes32)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Burn FunctionBurns a token"
      },
      "creator(uint256)": {
        "notice": "creator Functiongets the creator of a token"
      },
      "initialize(string,string)": {
        "notice": "initialize FunctionInitializes contract with default values, acts as a constructor"
      },
      "merkleRoot()": {
        "notice": "State variable containing merkle root see {IAngelaList}"
      },
      "mint((string,string,address,address,uint16),bytes32[])": {
        "notice": "mint Functionmints a new token"
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "royaltyInfo Functionoverride function gets royalty information for a token (EIP-2981)"
      },
      "royaltyPayoutAddress(uint256)": {
        "notice": "royaltyPayoutAddress Functiongets the address of the royalty payout for a token"
      },
      "supportsInterface(bytes4)": {
        "notice": "supportsInterface Functionoverride function to check if contract supports an interface"
      },
      "tokenContentURI(uint256)": {
        "notice": "tokenContentURI Functiongets the URI of the content of a token. subject to change pending EIP draft"
      },
      "tokenURI(uint256)": {
        "notice": "tokenURI Functionoverride function to get the URI of a token. returns stored metadataURI"
      },
      "updateContentURI(uint256,string)": {
        "notice": "updateContentURI Functionupdates the content URI of a token, emits an event"
      },
      "updateMetadataURI(uint256,string)": {
        "notice": "updateMetadataURI Functionupdates the metadata URI of a token, emits an event"
      },
      "updateRoot(bytes32)": {
        "notice": "updateRoot Functionupdates the merkleroot of the allowlistthis function is inherits from Angela.sol, and may not be necessary depending on role based configuration."
      },
      "updateRoyaltyInfo(uint256,address)": {
        "notice": "updateRoyaltyInfo Functionupdates the royalty payout address and royalty BPS of a token, emits an event"
      }
    },
    "notice": "-------------------------------------------------------------------------------------------------------------------- ____    ____       _      ___       __      __ /\\  _`\\ /\\  _`\\   /' \\   /'___`\\   /'__`\\  /'__`\\ \\ \\,\\L\\_\\ \\ \\L\\ \\/\\_, \\ /\\_\\ /\\ \\ /\\ \\/\\ \\/\\ \\/\\ \\ \\/_\\__ \\\\ \\ ,__/\\/_/\\ \\\\/_/// /__\\ \\ \\ \\ \\ \\ \\ \\ \\ /\\ \\L\\ \\ \\ \\/    \\ \\ \\  // /_\\ \\\\ \\ \\_\\ \\ \\ \\_\\ \\ \\ `\\____\\ \\_\\     \\ \\_\\/\\______/ \\ \\____/\\ \\____/ \\/_____/\\/_/      \\/_/\\/_____/   \\/___/  \\/___/************************************************ LEGAL DISCLAIMER: https://catalog.works/termsreator Shared NFT Media Contract for Catalog Records Inc.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 564,
        "contract": "contracts/catalog/SP1200.sol:SP1200",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 567,
        "contract": "contracts/catalog/SP1200.sol:SP1200",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1941,
        "contract": "contracts/catalog/SP1200.sol:SP1200",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2352,
        "contract": "contracts/catalog/SP1200.sol:SP1200",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 660,
        "contract": "contracts/catalog/SP1200.sol:SP1200",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 662,
        "contract": "contracts/catalog/SP1200.sol:SP1200",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 666,
        "contract": "contracts/catalog/SP1200.sol:SP1200",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 670,
        "contract": "contracts/catalog/SP1200.sol:SP1200",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 674,
        "contract": "contracts/catalog/SP1200.sol:SP1200",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 680,
        "contract": "contracts/catalog/SP1200.sol:SP1200",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1491,
        "contract": "contracts/catalog/SP1200.sol:SP1200",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/catalog/SP1200.sol:SP1200",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/catalog/SP1200.sol:SP1200",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2373,
        "contract": "contracts/catalog/SP1200.sol:SP1200",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "201",
        "type": "t_bytes32"
      },
      {
        "astId": 2503,
        "contract": "contracts/catalog/SP1200.sol:SP1200",
        "label": "tokenData",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_struct(TokenData)2497_storage)"
      },
      {
        "astId": 2506,
        "contract": "contracts/catalog/SP1200.sol:SP1200",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "203",
        "type": "t_struct(Counter)1948_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenData)2497_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SP1200.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)2497_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1948_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1947,
            "contract": "contracts/catalog/SP1200.sol:SP1200",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/catalog/SP1200.sol:SP1200",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/catalog/SP1200.sol:SP1200",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenData)2497_storage": {
        "encoding": "inplace",
        "label": "struct SP1200.TokenData",
        "members": [
          {
            "astId": 2488,
            "contract": "contracts/catalog/SP1200.sol:SP1200",
            "label": "metadataURI",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2490,
            "contract": "contracts/catalog/SP1200.sol:SP1200",
            "label": "contentURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2492,
            "contract": "contracts/catalog/SP1200.sol:SP1200",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2494,
            "contract": "contracts/catalog/SP1200.sol:SP1200",
            "label": "royaltyPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2496,
            "contract": "contracts/catalog/SP1200.sol:SP1200",
            "label": "royaltyBPS",
            "offset": 20,
            "slot": "3",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}