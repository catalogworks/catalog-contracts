{
  "address": "0xabB1Ed391Af7e7420498DDA433F5a4914A5E9470",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentURI",
          "type": "string"
        }
      ],
      "name": "ContentUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "MetadataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyPayout",
          "type": "address"
        }
      ],
      "name": "RoyaltyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "merkleRootUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contentURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "royaltyPayout",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "royaltyBPS",
              "type": "uint16"
            }
          ],
          "internalType": "struct TRImmutable.TokenData",
          "name": "_inputData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "royaltyPayoutAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenContentURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_contentURI",
          "type": "string"
        }
      ],
      "name": "updateContent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        }
      ],
      "name": "updateMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_newRoot",
          "type": "bytes32"
        }
      ],
      "name": "updateRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_payoutAddress",
          "type": "address"
        }
      ],
      "name": "updateRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7310faf5120cae7eb4920ac07dc2b9e9cf94fde4cde07b12f6054f5f5dba2fce",
  "receipt": {
    "to": null,
    "from": "0x17ff474427dd67E58d3FB785F00200AD8883c31E",
    "contractAddress": "0xabB1Ed391Af7e7420498DDA433F5a4914A5E9470",
    "transactionIndex": 0,
    "gasUsed": "2028533",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000880000000010000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000800000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000800000000000000000000000000000000000000000000000000000",
    "blockHash": "0x8eff43947225a87f48d781f30f422825e28d33b22090f6620c5e0a50792f1553",
    "transactionHash": "0x7310faf5120cae7eb4920ac07dc2b9e9cf94fde4cde07b12f6054f5f5dba2fce",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13674627,
        "transactionHash": "0x7310faf5120cae7eb4920ac07dc2b9e9cf94fde4cde07b12f6054f5f5dba2fce",
        "address": "0xabB1Ed391Af7e7420498DDA433F5a4914A5E9470",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000017ff474427dd67e58d3fb785f00200ad8883c31e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8eff43947225a87f48d781f30f422825e28d33b22090f6620c5e0a50792f1553"
      }
    ],
    "blockNumber": 13674627,
    "cumulativeGasUsed": "2028533",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3ef4bb0538a24b9395f74b87bbce1940",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"}],\"name\":\"ContentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"MetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyPayout\",\"type\":\"address\"}],\"name\":\"RoyaltyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"merkleRootUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyPayout\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royaltyBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct TRImmutable.TokenData\",\"name\":\"_inputData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"royaltyPayoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenContentURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_contentURI\",\"type\":\"string\"}],\"name\":\"updateContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"updateMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newRoot\",\"type\":\"bytes32\"}],\"name\":\"updateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payoutAddress\",\"type\":\"address\"}],\"name\":\"updateRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdated(uint256,string)\":{\"notice\":\"Events\"},\"merkleRootUpdated(bytes32)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burn\"},\"constructor\":{\"notice\":\"Constructor\"},\"merkleRoot()\":{\"notice\":\"State variable containing merkle root see {IAngelaList}\"},\"mint((string,string,address,address,uint16),bytes32[])\":{\"notice\":\"Mint perhaps no object constructor needed?\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"ERC165 bytes to add to interface array - set in parent contract implementing this standard bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a; _registerInterface(_INTERFACE_ID_ERC2981);\"},\"tokenURI(uint256)\":{\"notice\":\"override\"},\"updateContent(uint256,string)\":{\"notice\":\"setContentURI\"},\"updateMetadata(uint256,string)\":{\"notice\":\"setMetadataURI\"},\"updateRoot(bytes32)\":{\"notice\":\"updateRoot\"},\"updateRoyalty(uint256,address)\":{\"notice\":\"updateRoyalty\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/catalog/TRImmutable.sol\":\"TRImmutable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ALImmutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n--------------------------------------------------------------------------------------------------------------------\\n                                                                                        \\n ______  __     ______                                   __             __       ___\\n/\\\\  _  \\\\/\\\\ \\\\   /\\\\__  _\\\\                                 /\\\\ \\\\__         /\\\\ \\\\     /\\\\_ \\\\\\n\\\\ \\\\ \\\\L\\\\ \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/     ___ ___     ___ ___   __  __\\\\ \\\\ ,_\\\\    __  \\\\ \\\\ \\\\____\\\\//\\\\ \\\\      __\\n \\\\ \\\\  __ \\\\ \\\\ \\\\  __\\\\ \\\\ \\\\   /' __` __`\\\\ /' __` __`\\\\/\\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\/  /'__`\\\\ \\\\ \\\\ '__`\\\\ \\\\ \\\\ \\\\   /'__`\\\\\\n  \\\\ \\\\ \\\\/\\\\ \\\\ \\\\ \\\\L\\\\ \\\\\\\\_\\\\ \\\\__/\\\\ \\\\/\\\\ \\\\/\\\\ \\\\/\\\\ \\\\/\\\\ \\\\/\\\\ \\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\_/\\\\ \\\\L\\\\.\\\\_\\\\ \\\\ \\\\L\\\\ \\\\ \\\\_\\\\ \\\\_/\\\\  __/\\n   \\\\ \\\\_\\\\ \\\\_\\\\ \\\\____//\\\\_____\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_\\\\ \\\\____/ \\\\ \\\\__\\\\ \\\\__/.\\\\_\\\\\\\\ \\\\_,__/ /\\\\____\\\\ \\\\____\\\\\\n    \\\\/_/\\\\/_/\\\\/___/ \\\\/_____/\\\\/_/\\\\/_/\\\\/_/\\\\/_/\\\\/_/\\\\/_/\\\\/___/   \\\\/__/\\\\/__/\\\\/_/ \\\\/___/  \\\\/____/\\\\/____/\\n\\n\\\"heute nicht\\\" - Angela Merkel                                                                                                                                                                                                                                                                                                                                                                                                                                       \\n---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \\nTESTNET WIP\\n\\\"ALImmutable\\\"               :   Allowlist utility merkle proof contract (non upgradeable)\\n@author                     :   @bretth18 (computerdata) \\n@title                      :   AngelaList\\n@dev                        :   n/a\\n */\\n\\ncontract ALImmutable {\\n    /// State variable containing merkle root\\n    /// see {IAngelaList}\\n    bytes32 public merkleRoot;\\n\\n    /// Events\\n    event merkleRootUpdated(bytes32 _merkleRoot);\\n\\n    /// update merkle root\\n    function updateMerkleRoot(bytes32 _newRoot) internal {\\n        merkleRoot = _newRoot;\\n        emit merkleRootUpdated(merkleRoot);\\n    }\\n\\n    /// return leaf\\n    function leaf(address _account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account));\\n    }\\n\\n    /// verify proof\\n    function verify(bytes32 _leaf, bytes32[] memory _proof) internal view returns (bool) {\\n        return MerkleProof.verify(_proof, merkleRoot, _leaf);\\n    }\\n}\\n\",\"keccak256\":\"0x24bf54d37b9e65a504e318a6fc9177aa80aa5fe94743c7bbd11f97417c548120\",\"license\":\"MIT\"},\"contracts/catalog/TRImmutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {IERC2981} from \\\"../interfaces/IERC2981.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\nimport {ALImmutable} from \\\"../ALImmutable.sol\\\";\\n\\ncontract TRImmutable is ERC721, Ownable, IERC2981, ALImmutable {\\n    using Counters for Counters.Counter;\\n\\n    /// Events\\n    event MetadataUpdated(uint256 indexed tokenId, string metadataURI);\\n    event ContentUpdated(uint256 indexed tokenId, string contentURI);\\n    event RoyaltyUpdated(uint256 indexed tokenId, address indexed royaltyPayout);\\n\\n    /// State\\n    struct TokenData {\\n        string metadataURI;\\n        string contentURI;\\n        address creator;\\n        address royaltyPayout;\\n        uint16 royaltyBPS;\\n    }\\n    /// Mappings\\n    mapping(uint256 => TokenData) private _tokenData;\\n    Counters.Counter private _tokenIdCounter;\\n\\n    /// Constructor\\n    constructor() ERC721(\\\"TRImmutable\\\", \\\"TRI\\\") {\\n        _tokenIdCounter.increment();\\n    }\\n\\n    /// Mint\\n    /// perhaps no object constructor needed?\\n    function mint(TokenData calldata _inputData, bytes32[] calldata _proof) external returns (uint256) {\\n        require(verify(leaf(_inputData.creator), _proof), \\\"!proof\\\");\\n        require(_inputData.royaltyBPS < 10000, \\\"!royalty<10k\\\");\\n\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _mint(msg.sender, tokenId);\\n\\n        _tokenData[tokenId] = _inputData;\\n\\n        _tokenIdCounter.increment();\\n        return tokenId;\\n    }\\n\\n    /// Burn\\n    function burn(uint256 _tokenId) external {\\n        require(\\n            (msg.sender == _tokenData[_tokenId].creator && msg.sender == ownerOf(_tokenId)) || msg.sender == owner(),\\n            \\\"Only creator or Admin\\\"\\n        );\\n        _burn(_tokenId);\\n    }\\n\\n    /// setMetadataURI\\n    function updateMetadata(uint256 _tokenId, string memory _metadataURI) external {\\n        require(_exists(_tokenId), \\\"!tokenId\\\");\\n        require(msg.sender == owner() || msg.sender == _tokenData[_tokenId].creator, \\\"!creator/admin\\\");\\n        emit MetadataUpdated(_tokenId, _metadataURI);\\n        _tokenData[_tokenId].metadataURI = _metadataURI;\\n    }\\n\\n    /// setContentURI\\n    function updateContent(uint256 _tokenId, string memory _contentURI) external {\\n        require(msg.sender == owner(), \\\"!admin\\\");\\n        emit ContentUpdated(_tokenId, _contentURI);\\n        _tokenData[_tokenId].contentURI = _contentURI;\\n    }\\n\\n    /// updateRoyalty\\n    function updateRoyalty(uint256 _tokenId, address _payoutAddress) external {\\n        require(msg.sender == owner(), \\\"!admin\\\");\\n        emit RoyaltyUpdated(_tokenId, _payoutAddress);\\n        _tokenData[_tokenId].royaltyPayout = _payoutAddress;\\n    }\\n\\n    /// updateRoot\\n    function updateRoot(bytes32 _newRoot) external {\\n        require(msg.sender == owner(), \\\"!admin\\\");\\n        updateMerkleRoot(_newRoot);\\n        (_newRoot);\\n    }\\n\\n    ///\\n\\n    function creator(uint256 _tokenId) public view returns (address) {\\n        return _tokenData[_tokenId].creator;\\n    }\\n\\n    function royaltyPayoutAddress(uint256 _tokenId) public view returns (address) {\\n        return _tokenData[_tokenId].royaltyPayout;\\n    }\\n\\n    function tokenContentURI(uint256 _tokenId) public view returns (string memory) {\\n        return _tokenData[_tokenId].contentURI;\\n    }\\n\\n    /// override\\n\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        return _tokenData[_tokenId].metadataURI;\\n    }\\n\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        return (_tokenData[_tokenId].royaltyPayout, (_salePrice * _tokenData[_tokenId].royaltyBPS) / 10000);\\n    }\\n\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC721) returns (bool) {\\n        return type(IERC2981).interfaceId == _interfaceId || ERC721.supportsInterface(_interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x582cf29660287a382f22ef99c226c1603caf848af1aebc5e1920880833096988\",\"license\":\"MIT\"},\"contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title ERC2981 interface\\ninterface IERC2981 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xac5e8fafcda4c763f999801179e4ce8909d8284d0eab3c92b9d2517ade67022d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604080518082018252600b81526a5452496d6d757461626c6560a81b60208083019182528351808501909452600384526254524960e81b90840152815191929162000060916000916200010f565b508051620000769060019060208401906200010f565b505050620000936200008d620000b060201b60201c565b620000b4565b620000aa60096200010660201b62000f701760201c565b620001f2565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80546001019055565b8280546200011d90620001b5565b90600052602060002090601f0160209004810192826200014157600085556200018c565b82601f106200015c57805160ff19168380011785556200018c565b828001600101855582156200018c579182015b828111156200018c5782518255916020019190600101906200016f565b506200019a9291506200019e565b5090565b5b808211156200019a57600081556001016200019f565b600181811c90821680620001ca57607f821691505b60208210811415620001ec57634e487b7160e01b600052602260045260246000fd5b50919050565b6121f380620002026000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c8063514eaa25116100f95780639d6335d711610097578063c87b56dd11610071578063c87b56dd146103b8578063e985e9c5146103cb578063f2fde38b14610407578063fbd8d2831461041a57600080fd5b80639d6335d71461037f578063a22cb46514610392578063b88d4fde146103a557600080fd5b806370a08231116100d357806370a082311461034b578063715018a61461035e5780638da5cb5b1461036657806395d89b411461037757600080fd5b8063514eaa251461031257806353c8388e146103255780636352211e1461033857600080fd5b806323b872dd116101665780632eb4a7ab116101405780632eb4a7ab146102a957806342842e0e146102c057806342966c68146102d3578063510b5158146102e657600080fd5b806323b872dd1461025157806325612dc6146102645780632a55205a1461027757600080fd5b806301ffc9a7146101ae57806306fdde03146101d6578063081812fc146101eb578063095ea7b3146102165780630c0a9d261461022b57806321ff99701461023e575b600080fd5b6101c16101bc3660046118bb565b610446565b60405190151581526020015b60405180910390f35b6101de610471565b6040516101cd9190611925565b6101fe6101f9366004611938565b610503565b6040516001600160a01b0390911681526020016101cd565b610229610224366004611966565b61059d565b005b6101de610239366004611938565b6106b3565b61022961024c366004611938565b610758565b61022961025f366004611992565b61078e565b610229610272366004611a5f565b6107bf565b61028a610285366004611aba565b610846565b604080516001600160a01b0390931683526020830191909152016101cd565b6102b260075481565b6040519081526020016101cd565b6102296102ce366004611992565b610894565b6102296102e1366004611938565b6108af565b6101fe6102f4366004611938565b6000908152600860205260409020600201546001600160a01b031690565b6102b2610320366004611adc565b610953565b610229610333366004611a5f565b610ab0565b6101fe610346366004611938565b610bc5565b6102b2610359366004611b7e565b610c3c565b610229610cc3565b6006546001600160a01b03166101fe565b6101de610d29565b61022961038d366004611b9b565b610d38565b6102296103a0366004611bcb565b610dc9565b6102296103b3366004611bfe565b610dd8565b6101de6103c6366004611938565b610e10565b6101c16103d9366004611c7e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610229610415366004611b7e565b610ea8565b6101fe610428366004611938565b6000908152600860205260409020600301546001600160a01b031690565b600063152a902d60e11b6001600160e01b03198316148061046b575061046b82610f79565b92915050565b60606000805461048090611cac565b80601f01602080910402602001604051908101604052809291908181526020018280546104ac90611cac565b80156104f95780601f106104ce576101008083540402835291602001916104f9565b820191906000526020600020905b8154815290600101906020018083116104dc57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166105815760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006105a882610bc5565b9050806001600160a01b0316836001600160a01b031614156106165760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610578565b336001600160a01b0382161480610632575061063281336103d9565b6106a45760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610578565b6106ae8383610fc9565b505050565b60008181526008602052604090206001018054606091906106d390611cac565b80601f01602080910402602001604051908101604052809291908181526020018280546106ff90611cac565b801561074c5780601f106107215761010080835404028352916020019161074c565b820191906000526020600020905b81548152906001019060200180831161072f57829003601f168201915b50505050509050919050565b6006546001600160a01b031633146107825760405162461bcd60e51b815260040161057890611ce7565b61078b81611037565b50565b6107983382611072565b6107b45760405162461bcd60e51b815260040161057890611d07565b6106ae838383611165565b6006546001600160a01b031633146107e95760405162461bcd60e51b815260040161057890611ce7565b817f4071afae07e623612645169abd4d62a6bd5932a996b14deac10d9903faccea54826040516108199190611925565b60405180910390a2600082815260086020908152604090912082516106ae9260019092019184019061180c565b60008281526008602052604081206003015481906001600160a01b038116906127109061087e90600160a01b900461ffff1686611d6e565b6108889190611d8d565b915091505b9250929050565b6106ae83838360405180602001604052806000815250610dd8565b6000818152600860205260409020600201546001600160a01b0316331480156108f157506108dc81610bc5565b6001600160a01b0316336001600160a01b0316145b8061090657506006546001600160a01b031633145b61094a5760405162461bcd60e51b815260206004820152601560248201527427b7363c9031b932b0ba37b91037b91020b236b4b760591b6044820152606401610578565b61078b81611305565b60006109e36109aa61096b6060870160408801611b7e565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506113a092505050565b610a185760405162461bcd60e51b815260206004820152600660248201526510b83937b7b360d11b6044820152606401610578565b612710610a2b60a0860160808701611dbf565b61ffff1610610a6b5760405162461bcd60e51b815260206004820152600c60248201526b21726f79616c74793c31306b60a01b6044820152606401610578565b6000610a7660095490565b9050610a8233826113b6565b60008181526008602052604090208590610a9c8282611f6c565b50506009805460010190555b949350505050565b6000828152600260205260409020546001600160a01b0316610aff5760405162461bcd60e51b8152602060048201526008602482015267085d1bdad95b925960c21b6044820152606401610578565b6006546001600160a01b0316331480610b3157506000828152600860205260409020600201546001600160a01b031633145b610b6e5760405162461bcd60e51b815260206004820152600e60248201526d10b1b932b0ba37b917b0b236b4b760911b6044820152606401610578565b817f459157ba24c7ab9878b165ef465fa6ae2ab42bcd8445f576be378768b0c4730982604051610b9e9190611925565b60405180910390a2600082815260086020908152604090912082516106ae9284019061180c565b6000818152600260205260408120546001600160a01b03168061046b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610578565b60006001600160a01b038216610ca75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610578565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b03163314610d1d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b610d2760006114f8565b565b60606001805461048090611cac565b6006546001600160a01b03163314610d625760405162461bcd60e51b815260040161057890611ce7565b6040516001600160a01b0382169083907f13ceafb5e8ec39102bd452913a5c00a05f3b060d636d3a567c1c80e8b4321fe790600090a360009182526008602052604090912060030180546001600160a01b0319166001600160a01b03909216919091179055565b610dd433838361154a565b5050565b610de23383611072565b610dfe5760405162461bcd60e51b815260040161057890611d07565b610e0a84848484611619565b50505050565b6000818152600260205260409020546060906001600160a01b0316610e8f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610578565b600082815260086020526040902080546106d390611cac565b6006546001600160a01b03163314610f025760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b6001600160a01b038116610f675760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610578565b61078b816114f8565b80546001019055565b60006001600160e01b031982166380ac58cd60e01b1480610faa57506001600160e01b03198216635b5e139f60e01b145b8061046b57506301ffc9a760e01b6001600160e01b031983161461046b565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610ffe82610bc5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60078190556040518181527fa2bc4a36b1e221bdcc16df9d7c15559a5f4f9902519c0f92ad3198f1df005e8b9060200160405180910390a150565b6000818152600260205260408120546001600160a01b03166110eb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610578565b60006110f683610bc5565b9050806001600160a01b0316846001600160a01b031614806111315750836001600160a01b031661112684610503565b6001600160a01b0316145b80610aa857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16610aa8565b826001600160a01b031661117882610bc5565b6001600160a01b0316146111e05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610578565b6001600160a01b0382166112425760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610578565b61124d600082610fc9565b6001600160a01b03831660009081526003602052604081208054600192906112769084906120b1565b90915550506001600160a01b03821660009081526003602052604081208054600192906112a49084906120c8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061131082610bc5565b905061131d600083610fc9565b6001600160a01b03811660009081526003602052604081208054600192906113469084906120b1565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006113af826007548561164c565b9392505050565b6001600160a01b03821661140c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610578565b6000818152600260205260409020546001600160a01b0316156114715760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610578565b6001600160a01b038216600090815260036020526040812080546001929061149a9084906120c8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156115ac5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610578565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611624848484611165565b61163084848484611662565b610e0a5760405162461bcd60e51b8152600401610578906120e0565b6000826116598584611760565b14949350505050565b60006001600160a01b0384163b1561175557604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906116a6903390899088908890600401612132565b6020604051808303816000875af19250505080156116e1575060408051601f3d908101601f191682019092526116de9181019061216f565b60015b61173b573d80801561170f576040519150601f19603f3d011682016040523d82523d6000602084013e611714565b606091505b5080516117335760405162461bcd60e51b8152600401610578906120e0565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610aa8565b506001949350505050565b600081815b84518110156118045760008582815181106117825761178261218c565b602002602001015190508083116117c45760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506117f1565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806117fc816121a2565b915050611765565b509392505050565b82805461181890611cac565b90600052602060002090601f01602090048101928261183a5760008555611880565b82601f1061185357805160ff1916838001178555611880565b82800160010185558215611880579182015b82811115611880578251825591602001919060010190611865565b5061188c929150611890565b5090565b5b8082111561188c5760008155600101611891565b6001600160e01b03198116811461078b57600080fd5b6000602082840312156118cd57600080fd5b81356113af816118a5565b6000815180845260005b818110156118fe576020818501810151868301820152016118e2565b81811115611910576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006113af60208301846118d8565b60006020828403121561194a57600080fd5b5035919050565b6001600160a01b038116811461078b57600080fd5b6000806040838503121561197957600080fd5b823561198481611951565b946020939093013593505050565b6000806000606084860312156119a757600080fd5b83356119b281611951565b925060208401356119c281611951565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611a0457611a046119d3565b604051601f8501601f19908116603f01168101908282118183101715611a2c57611a2c6119d3565b81604052809350858152868686011115611a4557600080fd5b858560208301376000602087830101525050509392505050565b60008060408385031215611a7257600080fd5b82359150602083013567ffffffffffffffff811115611a9057600080fd5b8301601f81018513611aa157600080fd5b611ab0858235602084016119e9565b9150509250929050565b60008060408385031215611acd57600080fd5b50508035926020909101359150565b600080600060408486031215611af157600080fd5b833567ffffffffffffffff80821115611b0957600080fd5b9085019060a08288031215611b1d57600080fd5b90935060208501359080821115611b3357600080fd5b818601915086601f830112611b4757600080fd5b813581811115611b5657600080fd5b8760208260051b8501011115611b6b57600080fd5b6020830194508093505050509250925092565b600060208284031215611b9057600080fd5b81356113af81611951565b60008060408385031215611bae57600080fd5b823591506020830135611bc081611951565b809150509250929050565b60008060408385031215611bde57600080fd5b8235611be981611951565b915060208301358015158114611bc057600080fd5b60008060008060808587031215611c1457600080fd5b8435611c1f81611951565b93506020850135611c2f81611951565b925060408501359150606085013567ffffffffffffffff811115611c5257600080fd5b8501601f81018713611c6357600080fd5b611c72878235602084016119e9565b91505092959194509250565b60008060408385031215611c9157600080fd5b8235611c9c81611951565b91506020830135611bc081611951565b600181811c90821680611cc057607f821691505b60208210811415611ce157634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526006908201526510b0b236b4b760d11b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611d8857611d88611d58565b500290565b600082611daa57634e487b7160e01b600052601260045260246000fd5b500490565b61ffff8116811461078b57600080fd5b600060208284031215611dd157600080fd5b81356113af81611daf565b6000808335601e19843603018112611df357600080fd5b83018035915067ffffffffffffffff821115611e0e57600080fd5b60200191503681900382131561088d57600080fd5b601f8211156106ae57600081815260208120601f850160051c81016020861015611e4a5750805b601f850160051c820191505b81811015611e6957828155600101611e56565b505050505050565b67ffffffffffffffff831115611e8957611e896119d3565b611e9d83611e978354611cac565b83611e23565b6000601f841160018114611ed15760008515611eb95750838201355b600019600387901b1c1916600186901b178355611f2b565b600083815260209020601f19861690835b82811015611f025786850135825560209485019460019092019101611ee2565b5086821015611f1f5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6000813561046b81611951565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000813561046b81611daf565b611f768283611ddc565b67ffffffffffffffff811115611f8e57611f8e6119d3565b611fa281611f9c8554611cac565b85611e23565b6000601f821160018114611fd65760008315611fbe5750838201355b600019600385901b1c1916600184901b178555612030565b600085815260209020601f19841690835b828110156120075786850135825560209485019460019092019101611fe7565b50848210156120245760001960f88660031b161c19848701351681555b505060018360011b0185555b505050506120416020830183611ddc565b61204f818360018601611e71565b505061206961206060408401611f32565b60028301611f3f565b6003810161208261207c60608501611f32565b82611f3f565b6106ae61209160808501611f5f565b82805461ffff60a01b191660a09290921b61ffff60a01b16919091179055565b6000828210156120c3576120c3611d58565b500390565b600082198211156120db576120db611d58565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612165908301846118d8565b9695505050505050565b60006020828403121561218157600080fd5b81516113af816118a5565b634e487b7160e01b600052603260045260246000fd5b60006000198214156121b6576121b6611d58565b506001019056fea2646970667358221220df23f3eee02a85d73be7f63823a2a744835765cccb13438e3a0462fef285094964736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c8063514eaa25116100f95780639d6335d711610097578063c87b56dd11610071578063c87b56dd146103b8578063e985e9c5146103cb578063f2fde38b14610407578063fbd8d2831461041a57600080fd5b80639d6335d71461037f578063a22cb46514610392578063b88d4fde146103a557600080fd5b806370a08231116100d357806370a082311461034b578063715018a61461035e5780638da5cb5b1461036657806395d89b411461037757600080fd5b8063514eaa251461031257806353c8388e146103255780636352211e1461033857600080fd5b806323b872dd116101665780632eb4a7ab116101405780632eb4a7ab146102a957806342842e0e146102c057806342966c68146102d3578063510b5158146102e657600080fd5b806323b872dd1461025157806325612dc6146102645780632a55205a1461027757600080fd5b806301ffc9a7146101ae57806306fdde03146101d6578063081812fc146101eb578063095ea7b3146102165780630c0a9d261461022b57806321ff99701461023e575b600080fd5b6101c16101bc3660046118bb565b610446565b60405190151581526020015b60405180910390f35b6101de610471565b6040516101cd9190611925565b6101fe6101f9366004611938565b610503565b6040516001600160a01b0390911681526020016101cd565b610229610224366004611966565b61059d565b005b6101de610239366004611938565b6106b3565b61022961024c366004611938565b610758565b61022961025f366004611992565b61078e565b610229610272366004611a5f565b6107bf565b61028a610285366004611aba565b610846565b604080516001600160a01b0390931683526020830191909152016101cd565b6102b260075481565b6040519081526020016101cd565b6102296102ce366004611992565b610894565b6102296102e1366004611938565b6108af565b6101fe6102f4366004611938565b6000908152600860205260409020600201546001600160a01b031690565b6102b2610320366004611adc565b610953565b610229610333366004611a5f565b610ab0565b6101fe610346366004611938565b610bc5565b6102b2610359366004611b7e565b610c3c565b610229610cc3565b6006546001600160a01b03166101fe565b6101de610d29565b61022961038d366004611b9b565b610d38565b6102296103a0366004611bcb565b610dc9565b6102296103b3366004611bfe565b610dd8565b6101de6103c6366004611938565b610e10565b6101c16103d9366004611c7e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610229610415366004611b7e565b610ea8565b6101fe610428366004611938565b6000908152600860205260409020600301546001600160a01b031690565b600063152a902d60e11b6001600160e01b03198316148061046b575061046b82610f79565b92915050565b60606000805461048090611cac565b80601f01602080910402602001604051908101604052809291908181526020018280546104ac90611cac565b80156104f95780601f106104ce576101008083540402835291602001916104f9565b820191906000526020600020905b8154815290600101906020018083116104dc57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166105815760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006105a882610bc5565b9050806001600160a01b0316836001600160a01b031614156106165760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610578565b336001600160a01b0382161480610632575061063281336103d9565b6106a45760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610578565b6106ae8383610fc9565b505050565b60008181526008602052604090206001018054606091906106d390611cac565b80601f01602080910402602001604051908101604052809291908181526020018280546106ff90611cac565b801561074c5780601f106107215761010080835404028352916020019161074c565b820191906000526020600020905b81548152906001019060200180831161072f57829003601f168201915b50505050509050919050565b6006546001600160a01b031633146107825760405162461bcd60e51b815260040161057890611ce7565b61078b81611037565b50565b6107983382611072565b6107b45760405162461bcd60e51b815260040161057890611d07565b6106ae838383611165565b6006546001600160a01b031633146107e95760405162461bcd60e51b815260040161057890611ce7565b817f4071afae07e623612645169abd4d62a6bd5932a996b14deac10d9903faccea54826040516108199190611925565b60405180910390a2600082815260086020908152604090912082516106ae9260019092019184019061180c565b60008281526008602052604081206003015481906001600160a01b038116906127109061087e90600160a01b900461ffff1686611d6e565b6108889190611d8d565b915091505b9250929050565b6106ae83838360405180602001604052806000815250610dd8565b6000818152600860205260409020600201546001600160a01b0316331480156108f157506108dc81610bc5565b6001600160a01b0316336001600160a01b0316145b8061090657506006546001600160a01b031633145b61094a5760405162461bcd60e51b815260206004820152601560248201527427b7363c9031b932b0ba37b91037b91020b236b4b760591b6044820152606401610578565b61078b81611305565b60006109e36109aa61096b6060870160408801611b7e565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506113a092505050565b610a185760405162461bcd60e51b815260206004820152600660248201526510b83937b7b360d11b6044820152606401610578565b612710610a2b60a0860160808701611dbf565b61ffff1610610a6b5760405162461bcd60e51b815260206004820152600c60248201526b21726f79616c74793c31306b60a01b6044820152606401610578565b6000610a7660095490565b9050610a8233826113b6565b60008181526008602052604090208590610a9c8282611f6c565b50506009805460010190555b949350505050565b6000828152600260205260409020546001600160a01b0316610aff5760405162461bcd60e51b8152602060048201526008602482015267085d1bdad95b925960c21b6044820152606401610578565b6006546001600160a01b0316331480610b3157506000828152600860205260409020600201546001600160a01b031633145b610b6e5760405162461bcd60e51b815260206004820152600e60248201526d10b1b932b0ba37b917b0b236b4b760911b6044820152606401610578565b817f459157ba24c7ab9878b165ef465fa6ae2ab42bcd8445f576be378768b0c4730982604051610b9e9190611925565b60405180910390a2600082815260086020908152604090912082516106ae9284019061180c565b6000818152600260205260408120546001600160a01b03168061046b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610578565b60006001600160a01b038216610ca75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610578565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b03163314610d1d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b610d2760006114f8565b565b60606001805461048090611cac565b6006546001600160a01b03163314610d625760405162461bcd60e51b815260040161057890611ce7565b6040516001600160a01b0382169083907f13ceafb5e8ec39102bd452913a5c00a05f3b060d636d3a567c1c80e8b4321fe790600090a360009182526008602052604090912060030180546001600160a01b0319166001600160a01b03909216919091179055565b610dd433838361154a565b5050565b610de23383611072565b610dfe5760405162461bcd60e51b815260040161057890611d07565b610e0a84848484611619565b50505050565b6000818152600260205260409020546060906001600160a01b0316610e8f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610578565b600082815260086020526040902080546106d390611cac565b6006546001600160a01b03163314610f025760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b6001600160a01b038116610f675760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610578565b61078b816114f8565b80546001019055565b60006001600160e01b031982166380ac58cd60e01b1480610faa57506001600160e01b03198216635b5e139f60e01b145b8061046b57506301ffc9a760e01b6001600160e01b031983161461046b565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610ffe82610bc5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60078190556040518181527fa2bc4a36b1e221bdcc16df9d7c15559a5f4f9902519c0f92ad3198f1df005e8b9060200160405180910390a150565b6000818152600260205260408120546001600160a01b03166110eb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610578565b60006110f683610bc5565b9050806001600160a01b0316846001600160a01b031614806111315750836001600160a01b031661112684610503565b6001600160a01b0316145b80610aa857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16610aa8565b826001600160a01b031661117882610bc5565b6001600160a01b0316146111e05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610578565b6001600160a01b0382166112425760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610578565b61124d600082610fc9565b6001600160a01b03831660009081526003602052604081208054600192906112769084906120b1565b90915550506001600160a01b03821660009081526003602052604081208054600192906112a49084906120c8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061131082610bc5565b905061131d600083610fc9565b6001600160a01b03811660009081526003602052604081208054600192906113469084906120b1565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006113af826007548561164c565b9392505050565b6001600160a01b03821661140c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610578565b6000818152600260205260409020546001600160a01b0316156114715760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610578565b6001600160a01b038216600090815260036020526040812080546001929061149a9084906120c8565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156115ac5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610578565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611624848484611165565b61163084848484611662565b610e0a5760405162461bcd60e51b8152600401610578906120e0565b6000826116598584611760565b14949350505050565b60006001600160a01b0384163b1561175557604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906116a6903390899088908890600401612132565b6020604051808303816000875af19250505080156116e1575060408051601f3d908101601f191682019092526116de9181019061216f565b60015b61173b573d80801561170f576040519150601f19603f3d011682016040523d82523d6000602084013e611714565b606091505b5080516117335760405162461bcd60e51b8152600401610578906120e0565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610aa8565b506001949350505050565b600081815b84518110156118045760008582815181106117825761178261218c565b602002602001015190508083116117c45760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506117f1565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806117fc816121a2565b915050611765565b509392505050565b82805461181890611cac565b90600052602060002090601f01602090048101928261183a5760008555611880565b82601f1061185357805160ff1916838001178555611880565b82800160010185558215611880579182015b82811115611880578251825591602001919060010190611865565b5061188c929150611890565b5090565b5b8082111561188c5760008155600101611891565b6001600160e01b03198116811461078b57600080fd5b6000602082840312156118cd57600080fd5b81356113af816118a5565b6000815180845260005b818110156118fe576020818501810151868301820152016118e2565b81811115611910576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006113af60208301846118d8565b60006020828403121561194a57600080fd5b5035919050565b6001600160a01b038116811461078b57600080fd5b6000806040838503121561197957600080fd5b823561198481611951565b946020939093013593505050565b6000806000606084860312156119a757600080fd5b83356119b281611951565b925060208401356119c281611951565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611a0457611a046119d3565b604051601f8501601f19908116603f01168101908282118183101715611a2c57611a2c6119d3565b81604052809350858152868686011115611a4557600080fd5b858560208301376000602087830101525050509392505050565b60008060408385031215611a7257600080fd5b82359150602083013567ffffffffffffffff811115611a9057600080fd5b8301601f81018513611aa157600080fd5b611ab0858235602084016119e9565b9150509250929050565b60008060408385031215611acd57600080fd5b50508035926020909101359150565b600080600060408486031215611af157600080fd5b833567ffffffffffffffff80821115611b0957600080fd5b9085019060a08288031215611b1d57600080fd5b90935060208501359080821115611b3357600080fd5b818601915086601f830112611b4757600080fd5b813581811115611b5657600080fd5b8760208260051b8501011115611b6b57600080fd5b6020830194508093505050509250925092565b600060208284031215611b9057600080fd5b81356113af81611951565b60008060408385031215611bae57600080fd5b823591506020830135611bc081611951565b809150509250929050565b60008060408385031215611bde57600080fd5b8235611be981611951565b915060208301358015158114611bc057600080fd5b60008060008060808587031215611c1457600080fd5b8435611c1f81611951565b93506020850135611c2f81611951565b925060408501359150606085013567ffffffffffffffff811115611c5257600080fd5b8501601f81018713611c6357600080fd5b611c72878235602084016119e9565b91505092959194509250565b60008060408385031215611c9157600080fd5b8235611c9c81611951565b91506020830135611bc081611951565b600181811c90821680611cc057607f821691505b60208210811415611ce157634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526006908201526510b0b236b4b760d11b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611d8857611d88611d58565b500290565b600082611daa57634e487b7160e01b600052601260045260246000fd5b500490565b61ffff8116811461078b57600080fd5b600060208284031215611dd157600080fd5b81356113af81611daf565b6000808335601e19843603018112611df357600080fd5b83018035915067ffffffffffffffff821115611e0e57600080fd5b60200191503681900382131561088d57600080fd5b601f8211156106ae57600081815260208120601f850160051c81016020861015611e4a5750805b601f850160051c820191505b81811015611e6957828155600101611e56565b505050505050565b67ffffffffffffffff831115611e8957611e896119d3565b611e9d83611e978354611cac565b83611e23565b6000601f841160018114611ed15760008515611eb95750838201355b600019600387901b1c1916600186901b178355611f2b565b600083815260209020601f19861690835b82811015611f025786850135825560209485019460019092019101611ee2565b5086821015611f1f5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6000813561046b81611951565b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000813561046b81611daf565b611f768283611ddc565b67ffffffffffffffff811115611f8e57611f8e6119d3565b611fa281611f9c8554611cac565b85611e23565b6000601f821160018114611fd65760008315611fbe5750838201355b600019600385901b1c1916600184901b178555612030565b600085815260209020601f19841690835b828110156120075786850135825560209485019460019092019101611fe7565b50848210156120245760001960f88660031b161c19848701351681555b505060018360011b0185555b505050506120416020830183611ddc565b61204f818360018601611e71565b505061206961206060408401611f32565b60028301611f3f565b6003810161208261207c60608501611f32565b82611f3f565b6106ae61209160808501611f5f565b82805461ffff60a01b191660a09290921b61ffff60a01b16919091179055565b6000828210156120c3576120c3611d58565b500390565b600082198211156120db576120db611d58565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612165908301846118d8565b9695505050505050565b60006020828403121561218157600080fd5b81516113af816118a5565b634e487b7160e01b600052603260045260246000fd5b60006000198214156121b6576121b6611d58565b506001019056fea2646970667358221220df23f3eee02a85d73be7f63823a2a744835765cccb13438e3a0462fef285094964736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "MetadataUpdated(uint256,string)": {
        "notice": "Events"
      },
      "merkleRootUpdated(bytes32)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Burn"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "merkleRoot()": {
        "notice": "State variable containing merkle root see {IAngelaList}"
      },
      "mint((string,string,address,address,uint16),bytes32[])": {
        "notice": "Mint perhaps no object constructor needed?"
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "ERC165 bytes to add to interface array - set in parent contract implementing this standard bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a; _registerInterface(_INTERFACE_ID_ERC2981);"
      },
      "tokenURI(uint256)": {
        "notice": "override"
      },
      "updateContent(uint256,string)": {
        "notice": "setContentURI"
      },
      "updateMetadata(uint256,string)": {
        "notice": "setMetadataURI"
      },
      "updateRoot(bytes32)": {
        "notice": "updateRoot"
      },
      "updateRoyalty(uint256,address)": {
        "notice": "updateRoyalty"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 782,
        "contract": "contracts/catalog/TRImmutable.sol:TRImmutable",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 784,
        "contract": "contracts/catalog/TRImmutable.sol:TRImmutable",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 788,
        "contract": "contracts/catalog/TRImmutable.sol:TRImmutable",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 792,
        "contract": "contracts/catalog/TRImmutable.sol:TRImmutable",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 796,
        "contract": "contracts/catalog/TRImmutable.sol:TRImmutable",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 802,
        "contract": "contracts/catalog/TRImmutable.sol:TRImmutable",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/catalog/TRImmutable.sol:TRImmutable",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2476,
        "contract": "contracts/catalog/TRImmutable.sol:TRImmutable",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      },
      {
        "astId": 2777,
        "contract": "contracts/catalog/TRImmutable.sol:TRImmutable",
        "label": "_tokenData",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(TokenData)2771_storage)"
      },
      {
        "astId": 2780,
        "contract": "contracts/catalog/TRImmutable.sol:TRImmutable",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)2073_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenData)2771_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TRImmutable.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)2771_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2073_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2072,
            "contract": "contracts/catalog/TRImmutable.sol:TRImmutable",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenData)2771_storage": {
        "encoding": "inplace",
        "label": "struct TRImmutable.TokenData",
        "members": [
          {
            "astId": 2762,
            "contract": "contracts/catalog/TRImmutable.sol:TRImmutable",
            "label": "metadataURI",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2764,
            "contract": "contracts/catalog/TRImmutable.sol:TRImmutable",
            "label": "contentURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2766,
            "contract": "contracts/catalog/TRImmutable.sol:TRImmutable",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2768,
            "contract": "contracts/catalog/TRImmutable.sol:TRImmutable",
            "label": "royaltyPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2770,
            "contract": "contracts/catalog/TRImmutable.sol:TRImmutable",
            "label": "royaltyBPS",
            "offset": 20,
            "slot": "3",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}