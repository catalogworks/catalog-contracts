{
  "address": "0x25a5cAa428dACcF60cB0A8c6B13bf3cA109512C1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "contentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contentURI",
          "type": "string"
        }
      ],
      "name": "ContentUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "CreatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "MerkleRootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "MetadataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payoutAddress",
          "type": "address"
        }
      ],
      "name": "RoyaltyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "royaltyPayout",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "royaltyBPS",
              "type": "uint16"
            }
          ],
          "internalType": "struct Catalog.TokenData",
          "name": "_data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "contentURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Catalog.ContentData",
          "name": "_content",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "royaltyPayoutAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "contentURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Catalog.ContentData",
          "name": "_content",
          "type": "tuple"
        }
      ],
      "name": "updateContentURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "updateCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        }
      ],
      "name": "updateMetadataURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_newRoot",
          "type": "bytes32"
        }
      ],
      "name": "updateRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_royaltyPayoutAddress",
          "type": "address"
        }
      ],
      "name": "updateRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3daa8cba349892728b472f2e4b9fe11b21a3276f1ea638285b8b7e87ba4b17b4",
  "receipt": {
    "to": null,
    "from": "0x43C4D51dE4b7bf046d92c324678a1a3969703632",
    "contractAddress": "0x25a5cAa428dACcF60cB0A8c6B13bf3cA109512C1",
    "transactionIndex": 12,
    "gasUsed": "2847386",
    "logsBloom": "0x
    "blockHash": "0x8c8a18d286718eec66943db5333df314f7adeaf959c613e836643986ff980937",
    "transactionHash": "0x3daa8cba349892728b472f2e4b9fe11b21a3276f1ea638285b8b7e87ba4b17b4",
    "logs": [],
    "blockNumber": 6738845,
    "cumulativeGasUsed": "10245819",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1804cc9a79f49657b93c2823a9c5f7be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"}],\"name\":\"ContentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"MetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"RoyaltyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyPayout\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royaltyBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct Catalog.TokenData\",\"name\":\"_data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct Catalog.ContentData\",\"name\":\"_content\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"royaltyPayoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct Catalog.ContentData\",\"name\":\"_content\",\"type\":\"tuple\"}],\"name\":\"updateContentURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"updateCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"updateMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newRoot\",\"type\":\"bytes32\"}],\"name\":\"updateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_royaltyPayoutAddress\",\"type\":\"address\"}],\"name\":\"updateRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\":   COMPUTER DATA (brett henderson) of Catalog Records Inc.\",\"details\":\":   Upgradeable ERC721 Contract, inherits functionality from ERC721Upgradeable.  This contract conforms to the EIP-2981 NFT Royalty Standard. ---------------------------------------------------------------------------------------------------------------------    \",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"burns given tokenId, restricted to creator (when owned)\",\"params\":{\"_tokenId\":\"identifier of token to burn\"}},\"creator(uint256)\":{\"details\":\"basic public getter method for creator\",\"params\":{\"_tokenId\":\"identifier of token to get creator for\"},\"returns\":{\"_0\":\"creator address of given tokenId\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"initialize(string,string)\":{\"details\":\"contains constructor logic, initializes proxied contract. must be called upon deployment.\",\"params\":{\"_name\":\"name of the contract\",\"_symbol\":\"symbol of the contract\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint((string,address,address,uint16),(string,bytes32),bytes32[])\":{\"details\":\"mints a new token to msg.sender with a valid input creator address proof. Emits a ContentUpdated event to track contentURI/contentHash updates.\",\"params\":{\"_content\":\"input ContentData struct, containing contentURI, contentHash.\",\"_data\":\"input TokenData struct, containing metadataURI, creator, royaltyPayout, royaltyBPS\",\"_proof\":\"merkle proof for the artist address.\"},\"returns\":{\"_0\":\"tokenId of the minted token \"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"conforms to EIP-2981\",\"params\":{\"_salePrice\":\"final sale price of token used to calculate royalty payout\",\"_tokenId\":\"token id corresponding to the token of which to get royalty information\"}},\"royaltyPayoutAddress(uint256)\":{\"details\":\"basic public getter method for royalty payout address \",\"params\":{\"_tokenId\":\"identifier of token to get royalty payout address for\"},\"returns\":{\"_0\":\"royalty payout address of given tokenId\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"id of interface to check\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"override function, returns metadataURI of token stored in tokenData\",\"params\":{\"_tokenId\":\"token id corresponding to the token of which to get metadata from\"},\"returns\":{\"_0\":\"string containing metadata URI (example: 'ipfs:///...')\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateContentURI(uint256,(string,bytes32))\":{\"details\":\"access controlled function, restricted to owner/admin. \",\"params\":{\"_content\":\"struct containing new/updated contentURI and hash.\",\"_tokenId\":\"token id corresponding to the token to update\"}},\"updateCreator(uint256,address)\":{\"details\":\"access controlled function, restricted to owner/admin. used in case of compromised artist wallet.\",\"params\":{\"_creator\":\"address new creator of the token\",\"_tokenId\":\"token id corresponding to the token to update\"}},\"updateMetadataURI(uint256,string)\":{\"details\":\"access controlled, restricted to creator of token\",\"params\":{\"_metadataURI\":\"string containing new/updated metadata (e.g IPFS URI pointing to metadata.json)\",\"_tokenId\":\"token id corresponding to the token to update\"}},\"updateRoot(bytes32)\":{\"details\":\"access controlled function, restricted to owner/admin.\",\"params\":{\"_newRoot\":\"containing the new root hash, generated off-chain\"}},\"updateRoyaltyInfo(uint256,address)\":{\"details\":\"access controlled to owner only. this function allows for emergency royalty control (i.e compromised wallet)\",\"params\":{\"_royaltyPayoutAddress\":\"address of new royalty payout address\",\"_tokenId\":\"token id corresponding to the token of which to update royalty payout\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\":   Catalog\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burns a token, given input tokenId\"},\"creator(uint256)\":{\"notice\":\"gets the creator address of a given tokenId\"},\"initialize(string,string)\":{\"notice\":\"Initializes contract with default values\"},\"merkleRoot()\":{\"notice\":\"Merkle Root\"},\"mint((string,address,address,uint16),(string,bytes32),bytes32[])\":{\"notice\":\"mints a new token\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"override function gets royalty information for a token (EIP-2981)\"},\"royaltyPayoutAddress(uint256)\":{\"notice\":\"gets the address for the royalty payout of a token/record\"},\"supportsInterface(bytes4)\":{\"notice\":\"override function to check if contract supports given interface\"},\"tokenURI(uint256)\":{\"notice\":\"override function to get the URI of a token. \"},\"updateContentURI(uint256,(string,bytes32))\":{\"notice\":\"Emits an event to be used to track content updates on a token\"},\"updateCreator(uint256,address)\":{\"notice\":\"updates the creator of a token, emits an event\"},\"updateMetadataURI(uint256,string)\":{\"notice\":\"updates the metadata URI of a token, emits an event\"},\"updateRoot(bytes32)\":{\"notice\":\"updates the merkle root of the allowlist\"},\"updateRoyaltyInfo(uint256,address)\":{\"notice\":\"updates the royalty payout address and royalty BPS of a token, emits an event\"}},\"notice\":\"-------------------------------------------------------------------------------------------------------------------- ,, .g8\\\"\\\"\\\"bgd         mm            `7MM .dP'     `M         MM              MM dM'       ` ,6\\\"Yb.mmMMmm  ,6\\\"Yb.    MM  ,pW\\\"Wq.   .P\\\"Ybmmm MM         8)   MM  MM   8)   MM    MM 6W'   `Wb :MI  I8 MM.         ,pm9MM  MM    ,pm9MM    MM 8M     M8  WmmmP\\\" `Mb.     ,'8M   MM  MM   8M   MM    MM YA.   ,A9 8M `\\\"bmmmd' `Moo9^Yo.`Mbmo`Moo9^Yo..JMML.`Ybmd9'   YMMMMMb 6'     dP Ybmmmd'************************************************ LEGAL DISCLAIMER: https://catalog.works/terms************************************************ ---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           :   The Catalog Shared Creator Contract is an upgradeable ERC721 contract, purpose built  to facilitate the creation of Catalog records.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/catalog/Catalog.sol\":\"Catalog\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xf710fb524203921ca2fca7201672900fbfb354a37b56dd3f4f2e1592b3edb999\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x805b2b34d4829b892217e5116dc1feb9c67bee2eb7d7b18dac3dbbb91b13e9c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x00d8f573e13de0ecde43557f5d246a322bc284ef644d9437d9bb8cb9a6eac265\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/catalog/Catalog.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {MerkleProofUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/**\\n--------------------------------------------------------------------------------------------------------------------\\n\\n                                    ,,\\n  .g8\\\"\\\"\\\"bgd         mm            `7MM\\n.dP'     `M         MM              MM\\ndM'       ` ,6\\\"Yb.mmMMmm  ,6\\\"Yb.    MM  ,pW\\\"Wq.   .P\\\"Ybmmm\\nMM         8)   MM  MM   8)   MM    MM 6W'   `Wb :MI  I8\\nMM.         ,pm9MM  MM    ,pm9MM    MM 8M     M8  WmmmP\\\"\\n`Mb.     ,'8M   MM  MM   8M   MM    MM YA.   ,A9 8M\\n  `\\\"bmmmd' `Moo9^Yo.`Mbmo`Moo9^Yo..JMML.`Ybmd9'   YMMMMMb\\n                                                 6'     dP\\n                                                 Ybmmmd'\\n\\n************************************************\\nLEGAL DISCLAIMER:\\nhttps://catalog.works/terms\\n************************************************\\n\\n---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \\n\\n@title                      :   Catalog\\n@author                     :   COMPUTER DATA (brett henderson) of Catalog Records Inc.\\n@notice                     :   The Catalog Shared Creator Contract is an upgradeable ERC721 contract, purpose built \\n                                to facilitate the creation of Catalog records.\\n@dev                        :   Upgradeable ERC721 Contract, inherits functionality from ERC721Upgradeable. \\n                                This contract conforms to the EIP-2981 NFT Royalty Standard.\\n\\n---------------------------------------------------------------------------------------------------------------------    \\n */\\ncontract Catalog is ERC721Upgradeable, IERC2981Upgradeable, OwnableUpgradeable, UUPSUpgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event CreatorUpdated(uint256 indexed tokenId, address indexed creator);\\n    event ContentUpdated(uint256 indexed tokenId, bytes32 indexed contentHash, string contentURI);\\n    event MetadataUpdated(uint256 indexed tokenId, string metadataURI);\\n    event MerkleRootUpdated(bytes32 indexed merkleRoot);\\n    event RoyaltyUpdated(uint256 indexed tokenId, address indexed payoutAddress);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         STATE/STORAGE/CALLDATA\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Storage for readable properties of a Catalog NFT\\n    /// @param metadataURI URI of the metadata (ipfs://)\\n    /// @param creator Address of the creator\\n    /// @param royaltyPayout payout address for royalties (EIP2981)\\n    /// @param royaltyBPS royalty percentage (in basis points)\\n    /// @dev this struct is used to store the readable properties of a Catalog NFT\\n    struct TokenData {\\n        string metadataURI;\\n        address creator;\\n        address royaltyPayout;\\n        uint16 royaltyBPS;\\n    }\\n\\n    /// @notice Calldata struct for input ContentData\\n    /// @param contentURI URI of the content (ipfs://)\\n    /// @param contentHash SHA256 hash of the content\\n    /// @dev this struct is not stored in storage, only used to emit events via input calldata\\n    struct ContentData {\\n        string contentURI;\\n        bytes32 contentHash;\\n    }\\n\\n    /// Mapping and Storage\\n    mapping(uint256 => TokenData) private tokenData;\\n    /// Tracking tokenIds\\n    CountersUpgradeable.Counter private _tokenIdCounter;\\n    /// Merkle Root\\n    bytes32 public merkleRoot;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             INITIALIZATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n        @notice Initializes contract with default values\\n        @param _name name of the contract\\n        @param _symbol symbol of the contract\\n        @dev contains constructor logic, initializes proxied contract. must be called upon deployment.\\n     */\\n    function initialize(string memory _name, string memory _symbol) public initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n\\n        /// Start tokenId @ 1\\n        _tokenIdCounter.increment();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                  BURN\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n        @notice Burns a token, given input tokenId\\n        @param _tokenId identifier of token to burn\\n        @dev burns given tokenId, restricted to creator (when owned)\\n     */\\n    function burn(uint256 _tokenId) external {\\n        require(\\n            (msg.sender == tokenData[_tokenId].creator && msg.sender == ownerOf(_tokenId)),\\n            \\\"Only creator\\\"\\n        );\\n        _burn(_tokenId);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                  MINT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n        @notice mints a new token\\n        @param _data input TokenData struct, containing metadataURI, creator, royaltyPayout, royaltyBPS\\n        @param _content input ContentData struct, containing contentURI, contentHash.\\n        @param _proof merkle proof for the artist address.\\n        @return tokenId of the minted token \\n        @dev mints a new token to msg.sender with a valid input creator address proof. Emits a ContentUpdated event to track contentURI/contentHash updates.\\n     */\\n    function mint(\\n        TokenData calldata _data,\\n        ContentData calldata _content,\\n        bytes32[] calldata _proof\\n    ) external returns (uint256) {\\n        require(\\n            MerkleProofUpgradeable.verify(\\n                _proof,\\n                merkleRoot,\\n                keccak256(abi.encodePacked(_data.creator))\\n            ),\\n            \\\"!valid proof\\\"\\n        );\\n        require(_data.royaltyBPS < 10000, \\\"royalty !< 10000\\\");\\n\\n        uint256 tokenId = _tokenIdCounter.current();\\n\\n        _mint(msg.sender, tokenId);\\n        tokenData[tokenId] = _data;\\n\\n        // Emit event to track ContentURI\\n        emit ContentUpdated(tokenId, _content.contentHash, _content.contentURI);\\n\\n        _tokenIdCounter.increment();\\n        return tokenId;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                  WRITE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n        @notice Emits an event to be used to track content updates on a token\\n        @param _tokenId token id corresponding to the token to update\\n        @param _content struct containing new/updated contentURI and hash.\\n        @dev access controlled function, restricted to owner/admin. \\n     */\\n    function updateContentURI(uint256 _tokenId, ContentData calldata _content) external onlyOwner {\\n        emit ContentUpdated(_tokenId, _content.contentHash, _content.contentURI);\\n    }\\n\\n    /**\\n        @notice updates the creator of a token, emits an event\\n        @param _tokenId token id corresponding to the token to update\\n        @param _creator address new creator of the token\\n        @dev access controlled function, restricted to owner/admin. used in case of compromised artist wallet.\\n     */\\n    function updateCreator(uint256 _tokenId, address _creator) external onlyOwner {\\n        emit CreatorUpdated(_tokenId, _creator);\\n        tokenData[_tokenId].creator = _creator;\\n    }\\n\\n    /**\\n        @notice updates the merkle root of the allowlist\\n        @param _newRoot containing the new root hash, generated off-chain\\n        @dev access controlled function, restricted to owner/admin.\\n     */\\n    function updateRoot(bytes32 _newRoot) external onlyOwner {\\n        emit MerkleRootUpdated(_newRoot);\\n        merkleRoot = _newRoot;\\n    }\\n\\n    /**\\n        @notice updates the metadata URI of a token, emits an event\\n        @param _tokenId token id corresponding to the token to update\\n        @param _metadataURI string containing new/updated metadata (e.g IPFS URI pointing to metadata.json)\\n        @dev access controlled, restricted to creator of token\\n     */\\n    function updateMetadataURI(uint256 _tokenId, string memory _metadataURI) external {\\n        require(msg.sender == tokenData[_tokenId].creator, \\\"!creator\\\");\\n        emit MetadataUpdated(_tokenId, _metadataURI);\\n        tokenData[_tokenId].metadataURI = _metadataURI;\\n    }\\n\\n    /**\\n        @notice updates the royalty payout address and royalty BPS of a token, emits an event\\n        @param _tokenId token id corresponding to the token of which to update royalty payout\\n        @param _royaltyPayoutAddress address of new royalty payout address\\n        @dev access controlled to owner only. this function allows for emergency royalty control (i.e compromised wallet)\\n     */\\n    function updateRoyaltyInfo(uint256 _tokenId, address _royaltyPayoutAddress)\\n        external\\n        onlyOwner\\n    {\\n        emit RoyaltyUpdated(_tokenId, _royaltyPayoutAddress);\\n        tokenData[_tokenId].royaltyPayout = _royaltyPayoutAddress;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                  READ\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n        @notice gets the creator address of a given tokenId\\n        @param _tokenId identifier of token to get creator for\\n        @return creator address of given tokenId\\n        @dev basic public getter method for creator\\n     */\\n    function creator(uint256 _tokenId) public view returns (address) {\\n        address c = tokenData[_tokenId].creator;\\n        return c;\\n    }\\n\\n    /**\\n        @notice gets the address for the royalty payout of a token/record\\n        @param _tokenId identifier of token to get royalty payout address for\\n        @return royalty payout address of given tokenId\\n        @dev basic public getter method for royalty payout address \\n     */\\n    function royaltyPayoutAddress(uint256 _tokenId) public view returns (address) {\\n        address r = tokenData[_tokenId].royaltyPayout;\\n        return r;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                OVERRIDES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n        @notice override function gets royalty information for a token (EIP-2981)\\n        @param _tokenId token id corresponding to the token of which to get royalty information\\n        @param _salePrice final sale price of token used to calculate royalty payout\\n        @dev conforms to EIP-2981\\n        @inheritdoc IERC2981Upgradeable\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        return (\\n            tokenData[_tokenId].royaltyPayout,\\n            (_salePrice * tokenData[_tokenId].royaltyBPS) / 10000\\n        );\\n    }\\n\\n    /**\\n        @notice override function to check if contract supports given interface\\n        @param interfaceId id of interface to check\\n        @inheritdoc IERC165Upgradeable\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n        @notice override function to get the URI of a token. \\n        @param _tokenId token id corresponding to the token of which to get metadata from\\n        @return string containing metadata URI (example: 'ipfs:///...')\\n        @dev override function, returns metadataURI of token stored in tokenData\\n     */\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        return tokenData[_tokenId].metadataURI;\\n    }\\n\\n    /**\\n        @notice override of UUPSUpgradeable authorizeUpgrade function. \\n        @param newImplementation address of the new implementation contract\\n        @dev access controlled to owner only, upgrades deployed proxy to input implementation. Can be modified to support different authorization schemes.\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x2db6fce81ad0ff16b85446bbf524918d210f9ccb2e0d410cc123b4fd646f6a14\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516132ae61004c60003960008181610a5c01528181610ae101528181610d7c01528181610e010152610eeb01526132ae6000f3fe6080604052600436106101d85760003560e01c80636352211e11610102578063a22cb46511610095578063f2fde38b11610064578063f2fde38b146105a5578063f8361bab146105c5578063fb339e4c146105e5578063fbd8d2831461060557600080fd5b8063a22cb465146104fc578063b88d4fde1461051c578063c87b56dd1461053c578063e985e9c51461055c57600080fd5b80637f9c8413116100d15780637f9c8413146104895780638da5cb5b146104a95780638fe86b3f146104c757806395d89b41146104e757600080fd5b80636352211e14610414578063669d311c1461043457806370a0823114610454578063715018a61461047457600080fd5b80632eb4a7ab1161017a5780634cd88b76116101495780634cd88b76146103925780634f1ef286146103b2578063510b5158146103c557806352d1902d146103ff57600080fd5b80632eb4a7ab1461030d5780633659cfe61461033257806342842e0e1461035257806342966c681461037257600080fd5b8063095ea7b3116101b6578063095ea7b31461026c57806321ff99701461028e57806323b872dd146102ae5780632a55205a146102ce57600080fd5b806301ffc9a7146101dd57806306fdde0314610212578063081812fc14610234575b600080fd5b3480156101e957600080fd5b506101fd6101f836600461293b565b61063f565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b50610227610683565b60405161020991906129b0565b34801561024057600080fd5b5061025461024f3660046129c3565b610715565b6040516001600160a01b039091168152602001610209565b34801561027857600080fd5b5061028c6102873660046129f1565b6107af565b005b34801561029a57600080fd5b5061028c6102a93660046129c3565b6108e0565b3480156102ba57600080fd5b5061028c6102c9366004612a1d565b61096b565b3480156102da57600080fd5b506102ee6102e9366004612a5e565b6109f2565b604080516001600160a01b039093168352602083019190915201610209565b34801561031957600080fd5b5061032461012f5481565b604051908152602001610209565b34801561033e57600080fd5b5061028c61034d366004612a80565b610a52565b34801561035e57600080fd5b5061028c61036d366004612a1d565b610bcd565b34801561037e57600080fd5b5061028c61038d3660046129c3565b610be8565b34801561039e57600080fd5b5061028c6103ad366004612b40565b610c80565b61028c6103c0366004612ba4565b610d72565b3480156103d157600080fd5b506102546103e03660046129c3565b600090815261012d60205260409020600101546001600160a01b031690565b34801561040b57600080fd5b50610324610ede565b34801561042057600080fd5b5061025461042f3660046129c3565b610fa3565b34801561044057600080fd5b5061028c61044f366004612bea565b61102e565b34801561046057600080fd5b5061032461046f366004612a80565b6110f0565b34801561048057600080fd5b5061028c61118a565b34801561049557600080fd5b5061028c6104a4366004612c32565b6111f0565b3480156104b557600080fd5b506097546001600160a01b0316610254565b3480156104d357600080fd5b5061028c6104e2366004612c6f565b611295565b3480156104f357600080fd5b50610227611357565b34801561050857600080fd5b5061028c610517366004612ca0565b611366565b34801561052857600080fd5b5061028c610537366004612cd3565b611371565b34801561054857600080fd5b506102276105573660046129c3565b6113ff565b34801561056857600080fd5b506101fd610577366004612d3f565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b3480156105b157600080fd5b5061028c6105c0366004612a80565b61152b565b3480156105d157600080fd5b5061028c6105e0366004612bea565b61160a565b3480156105f157600080fd5b50610324610600366004612d6d565b6116cc565b34801561061157600080fd5b506102546106203660046129c3565b600090815261012d60205260409020600201546001600160a01b031690565b60007f2a55205a000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061067d575061067d826118a3565b92915050565b60606065805461069290612e2e565b80601f01602080910402602001604051908101604052809291908181526020018280546106be90612e2e565b801561070b5780601f106106e05761010080835404028352916020019161070b565b820191906000526020600020905b8154815290600101906020018083116106ee57829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b03166107935760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b60006107ba82610fa3565b9050806001600160a01b0316836001600160a01b0316036108435760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161078a565b336001600160a01b038216148061085f575061085f8133610577565b6108d15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161078a565b6108db838361193e565b505050565b6097546001600160a01b0316331461093a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161078a565b60405181907f90004c04698bc3322499a575ed3752dd4abf33e0a7294c06a787a0fe01bea94190600090a261012f55565b61097533826119ac565b6109e75760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161078a565b6108db838383611a9f565b600082815261012d602052604081206002015481906001600160a01b0381169061271090610a3c9074010000000000000000000000000000000000000000900461ffff1686612e78565b610a469190612e97565b915091505b9250929050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610adf5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b606482015260840161078a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b3a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610ba55760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b606482015260840161078a565b610bae81611c6c565b60408051600080825260208201909252610bca91839190611cc6565b50565b6108db83838360405180602001604052806000815250611371565b600081815261012d60205260409020600101546001600160a01b031633148015610c2b5750610c1681610fa3565b6001600160a01b0316336001600160a01b0316145b610c775760405162461bcd60e51b815260206004820152600c60248201527f4f6e6c792063726561746f720000000000000000000000000000000000000000604482015260640161078a565b610bca81611e66565b600054610100900460ff16610c9b5760005460ff1615610c9f565b303b155b610d115760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161078a565b600054610100900460ff16158015610d33576000805461ffff19166101011790555b610d3d8383611f01565b610d45611f76565b610d4d611fe9565b610d5c61012e80546001019055565b80156108db576000805461ff0019169055505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610dff5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b606482015260840161078a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e5a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610ec55760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b606482015260840161078a565b610ece82611c6c565b610eda82826001611cc6565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f7e5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161078a565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6000818152606760205260408120546001600160a01b03168061067d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e0000000000000000000000000000000000000000000000606482015260840161078a565b6097546001600160a01b031633146110885760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161078a565b6040516001600160a01b0382169083907f13ceafb5e8ec39102bd452913a5c00a05f3b060d636d3a567c1c80e8b4321fe790600090a3600091825261012d602052604090912060020180546001600160a01b0319166001600160a01b03909216919091179055565b60006001600160a01b03821661116e5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f206164647265737300000000000000000000000000000000000000000000606482015260840161078a565b506001600160a01b031660009081526068602052604090205490565b6097546001600160a01b031633146111e45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161078a565b6111ee6000612054565b565b6097546001600160a01b0316331461124a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161078a565b6020810135827f0d555bd4628e8349ca5d17ca332d615c92b84cd24ab943921e8abcf6ae22c98b61127b8480612eb9565b604051611289929190612f00565b60405180910390a35050565b600082815261012d60205260409020600101546001600160a01b031633146112ff5760405162461bcd60e51b815260206004820152600860248201527f2163726561746f72000000000000000000000000000000000000000000000000604482015260640161078a565b817f459157ba24c7ab9878b165ef465fa6ae2ab42bcd8445f576be378768b0c473098260405161132f91906129b0565b60405180910390a2600082815261012d6020908152604090912082516108db9284019061288c565b60606066805461069290612e2e565b610eda3383836120a6565b61137b33836119ac565b6113ed5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161078a565b6113f984848484612174565b50505050565b6000818152606760205260409020546060906001600160a01b031661148c5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606482015260840161078a565b600082815261012d6020526040902080546114a690612e2e565b80601f01602080910402602001604051908101604052809291908181526020018280546114d290612e2e565b801561151f5780601f106114f45761010080835404028352916020019161151f565b820191906000526020600020905b81548152906001019060200180831161150257829003601f168201915b50505050509050919050565b6097546001600160a01b031633146115855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161078a565b6001600160a01b0381166116015760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161078a565b610bca81612054565b6097546001600160a01b031633146116645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161078a565b6040516001600160a01b0382169083907fc0186d9ba7364ebd80a7010121367f481af81e1028bf368b2172fedf2c6fc7de90600090a3600091825261012d602052604090912060010180546001600160a01b0319166001600160a01b03909216919091179055565b600061175d8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505061012f54915061171a90506040890160208a01612a80565b604051602001611742919060609190911b6bffffffffffffffffffffffff1916815260140190565b604051602081830303815290604052805190602001206121fd565b6117a95760405162461bcd60e51b815260206004820152600c60248201527f2176616c69642070726f6f660000000000000000000000000000000000000000604482015260640161078a565b6127106117bc6080870160608801612f3f565b61ffff161061180d5760405162461bcd60e51b815260206004820152601060248201527f726f79616c747920213c20313030303000000000000000000000000000000000604482015260640161078a565b600061181961012e5490565b90506118253382612215565b600081815261012d6020526040902086906118408282612fc4565b50506020850135817f0d555bd4628e8349ca5d17ca332d615c92b84cd24ab943921e8abcf6ae22c98b6118738880612eb9565b604051611881929190612f00565b60405180910390a361189861012e80546001019055565b90505b949350505050565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061190657506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061067d57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461067d565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061197382610fa3565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152606760205260408120546001600160a01b0316611a255760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161078a565b6000611a3083610fa3565b9050806001600160a01b0316846001600160a01b03161480611a6b5750836001600160a01b0316611a6084610715565b6001600160a01b0316145b8061189b57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff1661189b565b826001600160a01b0316611ab282610fa3565b6001600160a01b031614611b2e5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e6572000000000000000000000000000000000000000000000000000000606482015260840161078a565b6001600160a01b038216611ba95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161078a565b611bb460008261193e565b6001600160a01b0383166000908152606860205260408120805460019290611bdd908490613165565b90915550506001600160a01b0382166000908152606860205260408120805460019290611c0b90849061317c565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6097546001600160a01b03163314610bca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161078a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611cf9576108db83612357565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611d53575060408051601f3d908101601f19168201909252611d5091810190613194565b60015b611dc55760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161078a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611e5a5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161078a565b506108db838383612415565b6000611e7182610fa3565b9050611e7e60008361193e565b6001600160a01b0381166000908152606860205260408120805460019290611ea7908490613165565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff16611f6c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161078a565b610eda828261243a565b600054610100900460ff16611fe15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161078a565b6111ee6124cc565b600054610100900460ff166111ee5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161078a565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036121075760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161078a565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61217f848484611a9f565b61218b84848484612540565b6113f95760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161078a565b60008261220a8584612694565b1490505b9392505050565b6001600160a01b03821661226b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161078a565b6000818152606760205260409020546001600160a01b0316156122d05760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161078a565b6001600160a01b03821660009081526068602052604081208054600192906122f990849061317c565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0381163b6123d45760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161078a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b61241e83612708565b60008251118061242b5750805b156108db576113f98383612748565b600054610100900460ff166124a55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161078a565b81516124b890606590602085019061288c565b5080516108db90606690602084019061288c565b600054610100900460ff166125375760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161078a565b6111ee33612054565b60006001600160a01b0384163b1561268c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906125849033908990889088906004016131ad565b6020604051808303816000875af19250505080156125bf575060408051601f3d908101601f191682019092526125bc918101906131e9565b60015b612672573d8080156125ed576040519150601f19603f3d011682016040523d82523d6000602084013e6125f2565b606091505b50805160000361266a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161078a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061189b565b50600161189b565b600081815b84518110156127005760008582815181106126b6576126b6613206565b602002602001015190508083116126dc57600083815260208290526040902092506126ed565b600081815260208490526040902092505b50806126f88161321c565b915050612699565b509392505050565b61271181612357565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6127c75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161078a565b600080846001600160a01b0316846040516127e29190613235565b600060405180830381855af49150503d806000811461281d576040519150601f19603f3d011682016040523d82523d6000602084013e612822565b606091505b509150915061284a828260405180606001604052806027815260200161325260279139612853565b95945050505050565b6060831561286257508161220e565b8251156128725782518084602001fd5b8160405162461bcd60e51b815260040161078a91906129b0565b82805461289890612e2e565b90600052602060002090601f0160209004810192826128ba5760008555612900565b82601f106128d357805160ff1916838001178555612900565b82800160010185558215612900579182015b828111156129005782518255916020019190600101906128e5565b5061290c929150612910565b5090565b5b8082111561290c5760008155600101612911565b6001600160e01b031981168114610bca57600080fd5b60006020828403121561294d57600080fd5b813561220e81612925565b60005b8381101561297357818101518382015260200161295b565b838111156113f95750506000910152565b6000815180845261299c816020860160208601612958565b601f01601f19169290920160200192915050565b60208152600061220e6020830184612984565b6000602082840312156129d557600080fd5b5035919050565b6001600160a01b0381168114610bca57600080fd5b60008060408385031215612a0457600080fd5b8235612a0f816129dc565b946020939093013593505050565b600080600060608486031215612a3257600080fd5b8335612a3d816129dc565b92506020840135612a4d816129dc565b929592945050506040919091013590565b60008060408385031215612a7157600080fd5b50508035926020909101359150565b600060208284031215612a9257600080fd5b813561220e816129dc565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612ac457600080fd5b813567ffffffffffffffff80821115612adf57612adf612a9d565b604051601f8301601f19908116603f01168101908282118183101715612b0757612b07612a9d565b81604052838152866020858801011115612b2057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215612b5357600080fd5b823567ffffffffffffffff80821115612b6b57600080fd5b612b7786838701612ab3565b93506020850135915080821115612b8d57600080fd5b50612b9a85828601612ab3565b9150509250929050565b60008060408385031215612bb757600080fd5b8235612bc2816129dc565b9150602083013567ffffffffffffffff811115612bde57600080fd5b612b9a85828601612ab3565b60008060408385031215612bfd57600080fd5b823591506020830135612c0f816129dc565b809150509250929050565b600060408284031215612c2c57600080fd5b50919050565b60008060408385031215612c4557600080fd5b82359150602083013567ffffffffffffffff811115612c6357600080fd5b612b9a85828601612c1a565b60008060408385031215612c8257600080fd5b82359150602083013567ffffffffffffffff811115612bde57600080fd5b60008060408385031215612cb357600080fd5b8235612cbe816129dc565b915060208301358015158114612c0f57600080fd5b60008060008060808587031215612ce957600080fd5b8435612cf4816129dc565b93506020850135612d04816129dc565b925060408501359150606085013567ffffffffffffffff811115612d2757600080fd5b612d3387828801612ab3565b91505092959194509250565b60008060408385031215612d5257600080fd5b8235612d5d816129dc565b91506020830135612c0f816129dc565b60008060008060608587031215612d8357600080fd5b843567ffffffffffffffff80821115612d9b57600080fd5b9086019060808289031215612daf57600080fd5b90945060208601359080821115612dc557600080fd5b612dd188838901612c1a565b94506040870135915080821115612de757600080fd5b818701915087601f830112612dfb57600080fd5b813581811115612e0a57600080fd5b8860208260051b8501011115612e1f57600080fd5b95989497505060200194505050565b600181811c90821680612e4257607f821691505b602082108103612c2c57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612e9257612e92612e62565b500290565b600082612eb457634e487b7160e01b600052601260045260246000fd5b500490565b6000808335601e19843603018112612ed057600080fd5b83018035915067ffffffffffffffff821115612eeb57600080fd5b602001915036819003821315610a4b57600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b61ffff81168114610bca57600080fd5b600060208284031215612f5157600080fd5b813561220e81612f2f565b601f8211156108db57600081815260208120601f850160051c81016020861015612f835750805b601f850160051c820191505b81811015612fa257828155600101612f8f565b505050505050565b6000813561067d816129dc565b6000813561067d81612f2f565b8135601e19833603018112612fd857600080fd5b8201803567ffffffffffffffff811115612ff157600080fd5b6020813603818401131561300457600080fd5b613018826130128654612e2e565b86612f5c565b6000601f83116001811461304e576000841561303657508482018301355b600019600386901b1c1916600185901b1786556130ab565b600086815260209020601f19851690835b8281101561308057878501860135825593850193600190910190850161305f565b508582101561309f5760001960f88760031b161c198585890101351681555b505060018460011b0186555b50506130dc6130bb828701612faa565b600186016001600160a01b0382166001600160a01b03198254161781555050565b5050506002810161310f6130f260408501612faa565b82546001600160a01b0319166001600160a01b0391909116178255565b6108db61311e60608501612fb7565b82547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff1660a09190911b75ffff000000000000000000000000000000000000000016178255565b60008282101561317757613177612e62565b500390565b6000821982111561318f5761318f612e62565b500190565b6000602082840312156131a657600080fd5b5051919050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526131df6080830184612984565b9695505050505050565b6000602082840312156131fb57600080fd5b815161220e81612925565b634e487b7160e01b600052603260045260246000fd5b60006001820161322e5761322e612e62565b5060010190565b60008251613247818460208701612958565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220583fe15226056264525f4d371f74ec8431d4974c478a12a4251857e733ddb7b764736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c80636352211e11610102578063a22cb46511610095578063f2fde38b11610064578063f2fde38b146105a5578063f8361bab146105c5578063fb339e4c146105e5578063fbd8d2831461060557600080fd5b8063a22cb465146104fc578063b88d4fde1461051c578063c87b56dd1461053c578063e985e9c51461055c57600080fd5b80637f9c8413116100d15780637f9c8413146104895780638da5cb5b146104a95780638fe86b3f146104c757806395d89b41146104e757600080fd5b80636352211e14610414578063669d311c1461043457806370a0823114610454578063715018a61461047457600080fd5b80632eb4a7ab1161017a5780634cd88b76116101495780634cd88b76146103925780634f1ef286146103b2578063510b5158146103c557806352d1902d146103ff57600080fd5b80632eb4a7ab1461030d5780633659cfe61461033257806342842e0e1461035257806342966c681461037257600080fd5b8063095ea7b3116101b6578063095ea7b31461026c57806321ff99701461028e57806323b872dd146102ae5780632a55205a146102ce57600080fd5b806301ffc9a7146101dd57806306fdde0314610212578063081812fc14610234575b600080fd5b3480156101e957600080fd5b506101fd6101f836600461293b565b61063f565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b50610227610683565b60405161020991906129b0565b34801561024057600080fd5b5061025461024f3660046129c3565b610715565b6040516001600160a01b039091168152602001610209565b34801561027857600080fd5b5061028c6102873660046129f1565b6107af565b005b34801561029a57600080fd5b5061028c6102a93660046129c3565b6108e0565b3480156102ba57600080fd5b5061028c6102c9366004612a1d565b61096b565b3480156102da57600080fd5b506102ee6102e9366004612a5e565b6109f2565b604080516001600160a01b039093168352602083019190915201610209565b34801561031957600080fd5b5061032461012f5481565b604051908152602001610209565b34801561033e57600080fd5b5061028c61034d366004612a80565b610a52565b34801561035e57600080fd5b5061028c61036d366004612a1d565b610bcd565b34801561037e57600080fd5b5061028c61038d3660046129c3565b610be8565b34801561039e57600080fd5b5061028c6103ad366004612b40565b610c80565b61028c6103c0366004612ba4565b610d72565b3480156103d157600080fd5b506102546103e03660046129c3565b600090815261012d60205260409020600101546001600160a01b031690565b34801561040b57600080fd5b50610324610ede565b34801561042057600080fd5b5061025461042f3660046129c3565b610fa3565b34801561044057600080fd5b5061028c61044f366004612bea565b61102e565b34801561046057600080fd5b5061032461046f366004612a80565b6110f0565b34801561048057600080fd5b5061028c61118a565b34801561049557600080fd5b5061028c6104a4366004612c32565b6111f0565b3480156104b557600080fd5b506097546001600160a01b0316610254565b3480156104d357600080fd5b5061028c6104e2366004612c6f565b611295565b3480156104f357600080fd5b50610227611357565b34801561050857600080fd5b5061028c610517366004612ca0565b611366565b34801561052857600080fd5b5061028c610537366004612cd3565b611371565b34801561054857600080fd5b506102276105573660046129c3565b6113ff565b34801561056857600080fd5b506101fd610577366004612d3f565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b3480156105b157600080fd5b5061028c6105c0366004612a80565b61152b565b3480156105d157600080fd5b5061028c6105e0366004612bea565b61160a565b3480156105f157600080fd5b50610324610600366004612d6d565b6116cc565b34801561061157600080fd5b506102546106203660046129c3565b600090815261012d60205260409020600201546001600160a01b031690565b60007f2a55205a000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061067d575061067d826118a3565b92915050565b60606065805461069290612e2e565b80601f01602080910402602001604051908101604052809291908181526020018280546106be90612e2e565b801561070b5780601f106106e05761010080835404028352916020019161070b565b820191906000526020600020905b8154815290600101906020018083116106ee57829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b03166107935760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b60006107ba82610fa3565b9050806001600160a01b0316836001600160a01b0316036108435760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161078a565b336001600160a01b038216148061085f575061085f8133610577565b6108d15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161078a565b6108db838361193e565b505050565b6097546001600160a01b0316331461093a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161078a565b60405181907f90004c04698bc3322499a575ed3752dd4abf33e0a7294c06a787a0fe01bea94190600090a261012f55565b61097533826119ac565b6109e75760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161078a565b6108db838383611a9f565b600082815261012d602052604081206002015481906001600160a01b0381169061271090610a3c9074010000000000000000000000000000000000000000900461ffff1686612e78565b610a469190612e97565b915091505b9250929050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610adf5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b606482015260840161078a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b3a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610ba55760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b606482015260840161078a565b610bae81611c6c565b60408051600080825260208201909252610bca91839190611cc6565b50565b6108db83838360405180602001604052806000815250611371565b600081815261012d60205260409020600101546001600160a01b031633148015610c2b5750610c1681610fa3565b6001600160a01b0316336001600160a01b0316145b610c775760405162461bcd60e51b815260206004820152600c60248201527f4f6e6c792063726561746f720000000000000000000000000000000000000000604482015260640161078a565b610bca81611e66565b600054610100900460ff16610c9b5760005460ff1615610c9f565b303b155b610d115760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161078a565b600054610100900460ff16158015610d33576000805461ffff19166101011790555b610d3d8383611f01565b610d45611f76565b610d4d611fe9565b610d5c61012e80546001019055565b80156108db576000805461ff0019169055505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610dff5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b606482015260840161078a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e5a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610ec55760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b606482015260840161078a565b610ece82611c6c565b610eda82826001611cc6565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f7e5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161078a565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6000818152606760205260408120546001600160a01b03168061067d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e0000000000000000000000000000000000000000000000606482015260840161078a565b6097546001600160a01b031633146110885760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161078a565b6040516001600160a01b0382169083907f13ceafb5e8ec39102bd452913a5c00a05f3b060d636d3a567c1c80e8b4321fe790600090a3600091825261012d602052604090912060020180546001600160a01b0319166001600160a01b03909216919091179055565b60006001600160a01b03821661116e5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f206164647265737300000000000000000000000000000000000000000000606482015260840161078a565b506001600160a01b031660009081526068602052604090205490565b6097546001600160a01b031633146111e45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161078a565b6111ee6000612054565b565b6097546001600160a01b0316331461124a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161078a565b6020810135827f0d555bd4628e8349ca5d17ca332d615c92b84cd24ab943921e8abcf6ae22c98b61127b8480612eb9565b604051611289929190612f00565b60405180910390a35050565b600082815261012d60205260409020600101546001600160a01b031633146112ff5760405162461bcd60e51b815260206004820152600860248201527f2163726561746f72000000000000000000000000000000000000000000000000604482015260640161078a565b817f459157ba24c7ab9878b165ef465fa6ae2ab42bcd8445f576be378768b0c473098260405161132f91906129b0565b60405180910390a2600082815261012d6020908152604090912082516108db9284019061288c565b60606066805461069290612e2e565b610eda3383836120a6565b61137b33836119ac565b6113ed5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161078a565b6113f984848484612174565b50505050565b6000818152606760205260409020546060906001600160a01b031661148c5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606482015260840161078a565b600082815261012d6020526040902080546114a690612e2e565b80601f01602080910402602001604051908101604052809291908181526020018280546114d290612e2e565b801561151f5780601f106114f45761010080835404028352916020019161151f565b820191906000526020600020905b81548152906001019060200180831161150257829003601f168201915b50505050509050919050565b6097546001600160a01b031633146115855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161078a565b6001600160a01b0381166116015760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161078a565b610bca81612054565b6097546001600160a01b031633146116645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161078a565b6040516001600160a01b0382169083907fc0186d9ba7364ebd80a7010121367f481af81e1028bf368b2172fedf2c6fc7de90600090a3600091825261012d602052604090912060010180546001600160a01b0319166001600160a01b03909216919091179055565b600061175d8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505061012f54915061171a90506040890160208a01612a80565b604051602001611742919060609190911b6bffffffffffffffffffffffff1916815260140190565b604051602081830303815290604052805190602001206121fd565b6117a95760405162461bcd60e51b815260206004820152600c60248201527f2176616c69642070726f6f660000000000000000000000000000000000000000604482015260640161078a565b6127106117bc6080870160608801612f3f565b61ffff161061180d5760405162461bcd60e51b815260206004820152601060248201527f726f79616c747920213c20313030303000000000000000000000000000000000604482015260640161078a565b600061181961012e5490565b90506118253382612215565b600081815261012d6020526040902086906118408282612fc4565b50506020850135817f0d555bd4628e8349ca5d17ca332d615c92b84cd24ab943921e8abcf6ae22c98b6118738880612eb9565b604051611881929190612f00565b60405180910390a361189861012e80546001019055565b90505b949350505050565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061190657506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061067d57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461067d565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061197382610fa3565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152606760205260408120546001600160a01b0316611a255760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161078a565b6000611a3083610fa3565b9050806001600160a01b0316846001600160a01b03161480611a6b5750836001600160a01b0316611a6084610715565b6001600160a01b0316145b8061189b57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff1661189b565b826001600160a01b0316611ab282610fa3565b6001600160a01b031614611b2e5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e6572000000000000000000000000000000000000000000000000000000606482015260840161078a565b6001600160a01b038216611ba95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161078a565b611bb460008261193e565b6001600160a01b0383166000908152606860205260408120805460019290611bdd908490613165565b90915550506001600160a01b0382166000908152606860205260408120805460019290611c0b90849061317c565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6097546001600160a01b03163314610bca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161078a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611cf9576108db83612357565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611d53575060408051601f3d908101601f19168201909252611d5091810190613194565b60015b611dc55760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161078a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611e5a5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161078a565b506108db838383612415565b6000611e7182610fa3565b9050611e7e60008361193e565b6001600160a01b0381166000908152606860205260408120805460019290611ea7908490613165565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff16611f6c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161078a565b610eda828261243a565b600054610100900460ff16611fe15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161078a565b6111ee6124cc565b600054610100900460ff166111ee5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161078a565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036121075760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161078a565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61217f848484611a9f565b61218b84848484612540565b6113f95760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161078a565b60008261220a8584612694565b1490505b9392505050565b6001600160a01b03821661226b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161078a565b6000818152606760205260409020546001600160a01b0316156122d05760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161078a565b6001600160a01b03821660009081526068602052604081208054600192906122f990849061317c565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0381163b6123d45760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161078a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b61241e83612708565b60008251118061242b5750805b156108db576113f98383612748565b600054610100900460ff166124a55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161078a565b81516124b890606590602085019061288c565b5080516108db90606690602084019061288c565b600054610100900460ff166125375760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161078a565b6111ee33612054565b60006001600160a01b0384163b1561268c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906125849033908990889088906004016131ad565b6020604051808303816000875af19250505080156125bf575060408051601f3d908101601f191682019092526125bc918101906131e9565b60015b612672573d8080156125ed576040519150601f19603f3d011682016040523d82523d6000602084013e6125f2565b606091505b50805160000361266a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161078a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061189b565b50600161189b565b600081815b84518110156127005760008582815181106126b6576126b6613206565b602002602001015190508083116126dc57600083815260208290526040902092506126ed565b600081815260208490526040902092505b50806126f88161321c565b915050612699565b509392505050565b61271181612357565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6127c75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161078a565b600080846001600160a01b0316846040516127e29190613235565b600060405180830381855af49150503d806000811461281d576040519150601f19603f3d011682016040523d82523d6000602084013e612822565b606091505b509150915061284a828260405180606001604052806027815260200161325260279139612853565b95945050505050565b6060831561286257508161220e565b8251156128725782518084602001fd5b8160405162461bcd60e51b815260040161078a91906129b0565b82805461289890612e2e565b90600052602060002090601f0160209004810192826128ba5760008555612900565b82601f106128d357805160ff1916838001178555612900565b82800160010185558215612900579182015b828111156129005782518255916020019190600101906128e5565b5061290c929150612910565b5090565b5b8082111561290c5760008155600101612911565b6001600160e01b031981168114610bca57600080fd5b60006020828403121561294d57600080fd5b813561220e81612925565b60005b8381101561297357818101518382015260200161295b565b838111156113f95750506000910152565b6000815180845261299c816020860160208601612958565b601f01601f19169290920160200192915050565b60208152600061220e6020830184612984565b6000602082840312156129d557600080fd5b5035919050565b6001600160a01b0381168114610bca57600080fd5b60008060408385031215612a0457600080fd5b8235612a0f816129dc565b946020939093013593505050565b600080600060608486031215612a3257600080fd5b8335612a3d816129dc565b92506020840135612a4d816129dc565b929592945050506040919091013590565b60008060408385031215612a7157600080fd5b50508035926020909101359150565b600060208284031215612a9257600080fd5b813561220e816129dc565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612ac457600080fd5b813567ffffffffffffffff80821115612adf57612adf612a9d565b604051601f8301601f19908116603f01168101908282118183101715612b0757612b07612a9d565b81604052838152866020858801011115612b2057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215612b5357600080fd5b823567ffffffffffffffff80821115612b6b57600080fd5b612b7786838701612ab3565b93506020850135915080821115612b8d57600080fd5b50612b9a85828601612ab3565b9150509250929050565b60008060408385031215612bb757600080fd5b8235612bc2816129dc565b9150602083013567ffffffffffffffff811115612bde57600080fd5b612b9a85828601612ab3565b60008060408385031215612bfd57600080fd5b823591506020830135612c0f816129dc565b809150509250929050565b600060408284031215612c2c57600080fd5b50919050565b60008060408385031215612c4557600080fd5b82359150602083013567ffffffffffffffff811115612c6357600080fd5b612b9a85828601612c1a565b60008060408385031215612c8257600080fd5b82359150602083013567ffffffffffffffff811115612bde57600080fd5b60008060408385031215612cb357600080fd5b8235612cbe816129dc565b915060208301358015158114612c0f57600080fd5b60008060008060808587031215612ce957600080fd5b8435612cf4816129dc565b93506020850135612d04816129dc565b925060408501359150606085013567ffffffffffffffff811115612d2757600080fd5b612d3387828801612ab3565b91505092959194509250565b60008060408385031215612d5257600080fd5b8235612d5d816129dc565b91506020830135612c0f816129dc565b60008060008060608587031215612d8357600080fd5b843567ffffffffffffffff80821115612d9b57600080fd5b9086019060808289031215612daf57600080fd5b90945060208601359080821115612dc557600080fd5b612dd188838901612c1a565b94506040870135915080821115612de757600080fd5b818701915087601f830112612dfb57600080fd5b813581811115612e0a57600080fd5b8860208260051b8501011115612e1f57600080fd5b95989497505060200194505050565b600181811c90821680612e4257607f821691505b602082108103612c2c57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612e9257612e92612e62565b500290565b600082612eb457634e487b7160e01b600052601260045260246000fd5b500490565b6000808335601e19843603018112612ed057600080fd5b83018035915067ffffffffffffffff821115612eeb57600080fd5b602001915036819003821315610a4b57600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b61ffff81168114610bca57600080fd5b600060208284031215612f5157600080fd5b813561220e81612f2f565b601f8211156108db57600081815260208120601f850160051c81016020861015612f835750805b601f850160051c820191505b81811015612fa257828155600101612f8f565b505050505050565b6000813561067d816129dc565b6000813561067d81612f2f565b8135601e19833603018112612fd857600080fd5b8201803567ffffffffffffffff811115612ff157600080fd5b6020813603818401131561300457600080fd5b613018826130128654612e2e565b86612f5c565b6000601f83116001811461304e576000841561303657508482018301355b600019600386901b1c1916600185901b1786556130ab565b600086815260209020601f19851690835b8281101561308057878501860135825593850193600190910190850161305f565b508582101561309f5760001960f88760031b161c198585890101351681555b505060018460011b0186555b50506130dc6130bb828701612faa565b600186016001600160a01b0382166001600160a01b03198254161781555050565b5050506002810161310f6130f260408501612faa565b82546001600160a01b0319166001600160a01b0391909116178255565b6108db61311e60608501612fb7565b82547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff1660a09190911b75ffff000000000000000000000000000000000000000016178255565b60008282101561317757613177612e62565b500390565b6000821982111561318f5761318f612e62565b500190565b6000602082840312156131a657600080fd5b5051919050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526131df6080830184612984565b9695505050505050565b6000602082840312156131fb57600080fd5b815161220e81612925565b634e487b7160e01b600052603260045260246000fd5b60006001820161322e5761322e612e62565b5060010190565b60008251613247818460208701612958565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220583fe15226056264525f4d371f74ec8431d4974c478a12a4251857e733ddb7b764736f6c634300080d0033",
  "devdoc": {
    "author": ":   COMPUTER DATA (brett henderson) of Catalog Records Inc.",
    "details": ":   Upgradeable ERC721 Contract, inherits functionality from ERC721Upgradeable.  This contract conforms to the EIP-2981 NFT Royalty Standard. ---------------------------------------------------------------------------------------------------------------------    ",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "burns given tokenId, restricted to creator (when owned)",
        "params": {
          "_tokenId": "identifier of token to burn"
        }
      },
      "creator(uint256)": {
        "details": "basic public getter method for creator",
        "params": {
          "_tokenId": "identifier of token to get creator for"
        },
        "returns": {
          "_0": "creator address of given tokenId"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "initialize(string,string)": {
        "details": "contains constructor logic, initializes proxied contract. must be called upon deployment.",
        "params": {
          "_name": "name of the contract",
          "_symbol": "symbol of the contract"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint((string,address,address,uint16),(string,bytes32),bytes32[])": {
        "details": "mints a new token to msg.sender with a valid input creator address proof. Emits a ContentUpdated event to track contentURI/contentHash updates.",
        "params": {
          "_content": "input ContentData struct, containing contentURI, contentHash.",
          "_data": "input TokenData struct, containing metadataURI, creator, royaltyPayout, royaltyBPS",
          "_proof": "merkle proof for the artist address."
        },
        "returns": {
          "_0": "tokenId of the minted token "
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "conforms to EIP-2981",
        "params": {
          "_salePrice": "final sale price of token used to calculate royalty payout",
          "_tokenId": "token id corresponding to the token of which to get royalty information"
        }
      },
      "royaltyPayoutAddress(uint256)": {
        "details": "basic public getter method for royalty payout address ",
        "params": {
          "_tokenId": "identifier of token to get royalty payout address for"
        },
        "returns": {
          "_0": "royalty payout address of given tokenId"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.",
        "params": {
          "interfaceId": "id of interface to check"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "override function, returns metadataURI of token stored in tokenData",
        "params": {
          "_tokenId": "token id corresponding to the token of which to get metadata from"
        },
        "returns": {
          "_0": "string containing metadata URI (example: 'ipfs:///...')"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateContentURI(uint256,(string,bytes32))": {
        "details": "access controlled function, restricted to owner/admin. ",
        "params": {
          "_content": "struct containing new/updated contentURI and hash.",
          "_tokenId": "token id corresponding to the token to update"
        }
      },
      "updateCreator(uint256,address)": {
        "details": "access controlled function, restricted to owner/admin. used in case of compromised artist wallet.",
        "params": {
          "_creator": "address new creator of the token",
          "_tokenId": "token id corresponding to the token to update"
        }
      },
      "updateMetadataURI(uint256,string)": {
        "details": "access controlled, restricted to creator of token",
        "params": {
          "_metadataURI": "string containing new/updated metadata (e.g IPFS URI pointing to metadata.json)",
          "_tokenId": "token id corresponding to the token to update"
        }
      },
      "updateRoot(bytes32)": {
        "details": "access controlled function, restricted to owner/admin.",
        "params": {
          "_newRoot": "containing the new root hash, generated off-chain"
        }
      },
      "updateRoyaltyInfo(uint256,address)": {
        "details": "access controlled to owner only. this function allows for emergency royalty control (i.e compromised wallet)",
        "params": {
          "_royaltyPayoutAddress": "address of new royalty payout address",
          "_tokenId": "token id corresponding to the token of which to update royalty payout"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": ":   Catalog",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Burns a token, given input tokenId"
      },
      "creator(uint256)": {
        "notice": "gets the creator address of a given tokenId"
      },
      "initialize(string,string)": {
        "notice": "Initializes contract with default values"
      },
      "merkleRoot()": {
        "notice": "Merkle Root"
      },
      "mint((string,address,address,uint16),(string,bytes32),bytes32[])": {
        "notice": "mints a new token"
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "override function gets royalty information for a token (EIP-2981)"
      },
      "royaltyPayoutAddress(uint256)": {
        "notice": "gets the address for the royalty payout of a token/record"
      },
      "supportsInterface(bytes4)": {
        "notice": "override function to check if contract supports given interface"
      },
      "tokenURI(uint256)": {
        "notice": "override function to get the URI of a token. "
      },
      "updateContentURI(uint256,(string,bytes32))": {
        "notice": "Emits an event to be used to track content updates on a token"
      },
      "updateCreator(uint256,address)": {
        "notice": "updates the creator of a token, emits an event"
      },
      "updateMetadataURI(uint256,string)": {
        "notice": "updates the metadata URI of a token, emits an event"
      },
      "updateRoot(bytes32)": {
        "notice": "updates the merkle root of the allowlist"
      },
      "updateRoyaltyInfo(uint256,address)": {
        "notice": "updates the royalty payout address and royalty BPS of a token, emits an event"
      }
    },
    "notice": "-------------------------------------------------------------------------------------------------------------------- ,, .g8\"\"\"bgd         mm            `7MM .dP'     `M         MM              MM dM'       ` ,6\"Yb.mmMMmm  ,6\"Yb.    MM  ,pW\"Wq.   .P\"Ybmmm MM         8)   MM  MM   8)   MM    MM 6W'   `Wb :MI  I8 MM.         ,pm9MM  MM    ,pm9MM    MM 8M     M8  WmmmP\" `Mb.     ,'8M   MM  MM   8M   MM    MM YA.   ,A9 8M `\"bmmmd' `Moo9^Yo.`Mbmo`Moo9^Yo..JMML.`Ybmd9'   YMMMMMb 6'     dP Ybmmmd'************************************************ LEGAL DISCLAIMER: https://catalog.works/terms************************************************ ---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           :   The Catalog Shared Creator Contract is an upgradeable ERC721 contract, purpose built  to facilitate the creation of Catalog records.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 538,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 541,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2077,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2551,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 770,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 772,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 776,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 780,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 784,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 790,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1631,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 520,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 740,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2642,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "tokenData",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_uint256,t_struct(TokenData)2631_storage)"
      },
      {
        "astId": 2646,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "302",
        "type": "t_struct(Counter)2084_storage"
      },
      {
        "astId": 2649,
        "contract": "contracts/catalog/Catalog.sol:Catalog",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "303",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenData)2631_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Catalog.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)2631_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2084_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 2083,
            "contract": "contracts/catalog/Catalog.sol:Catalog",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenData)2631_storage": {
        "encoding": "inplace",
        "label": "struct Catalog.TokenData",
        "members": [
          {
            "astId": 2624,
            "contract": "contracts/catalog/Catalog.sol:Catalog",
            "label": "metadataURI",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2626,
            "contract": "contracts/catalog/Catalog.sol:Catalog",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2628,
            "contract": "contracts/catalog/Catalog.sol:Catalog",
            "label": "royaltyPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2630,
            "contract": "contracts/catalog/Catalog.sol:Catalog",
            "label": "royaltyBPS",
            "offset": 20,
            "slot": "2",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}