/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AngelaList, AngelaListInterface } from "../AngelaList";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
    ],
    name: "merkleRootUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50607d8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80632eb4a7ab14602d575b600080fd5b603560005481565b60405190815260200160405180910390f3fea264697066735822122026c05ce915e0595527a4010a9180de6dddc911ef00a7e4a42555a8603c77441a64736f6c63430008090033";

export class AngelaList__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AngelaList> {
    return super.deploy(overrides || {}) as Promise<AngelaList>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AngelaList {
    return super.attach(address) as AngelaList;
  }
  connect(signer: Signer): AngelaList__factory {
    return super.connect(signer) as AngelaList__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AngelaListInterface {
    return new utils.Interface(_abi) as AngelaListInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AngelaList {
    return new Contract(address, _abi, signerOrProvider) as AngelaList;
  }
}
